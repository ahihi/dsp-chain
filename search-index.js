var searchIndex = {};
searchIndex["dsp"] = {"doc":"","items":[[11,"fmt","daggy::walker","",0,null],[11,"clone","","",0,null],[11,"new","","Construct a new **Recursive** **Walker** starting from the node at the given index.",0,{"inputs":[{"name":"nodeindex"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"next","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",3,null],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",3,null],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"next","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"next","","",6,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"next","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"next","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"edges","","Convert to an iterator that only yields the edge indices.",10,null],[11,"nodes","","Convert to an iterator that only yields the node indices.",10,null],[11,"next","","",10,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"next","","",11,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"next","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"edges","","Convert to an iterator yielding only the edge weights.",13,null],[11,"nodes","","Convert to an iterator yielding only the node weights.",13,null],[11,"next","","",13,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"next","","",14,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"fmt","daggy","",16,null],[11,"clone","","",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"new","","Create a new, empty `Dag`.",16,{"inputs":[],"output":{"name":"dag"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",16,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dag"}}],[11,"clear","","Removes all nodes and edges from the **Dag**.",16,null],[11,"node_count","","The total number of nodes in the **Dag**.",16,null],[11,"edge_count","","The total number of edgees in the **Dag**.",16,null],[11,"graph","","Borrow the `Dag`&#39;s underlying `PetGraph&lt;N, Ix&gt;`.\nAll existing indices may be used to index into this `PetGraph` the same way they may be\nused to index into the `Dag`.",16,null],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`.\nAll existing indices may be used to index into this `PetGraph` the same way they may be\nused to index into the `Dag`.",16,null],[11,"add_node","","Add a new node to the `Dag` with the given weight.",16,null],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",16,null],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",16,null],[11,"update_edge","","Update the edge from nodes `a` -&gt; `b` with the given weight.",16,null],[11,"find_edge","","Find and return the index to the edge that describes `a` -&gt; `b` if there is one.",16,null],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",16,null],[11,"clear_edges","","Remove all edges.",16,null],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`.\nReturns both the edge&#39;s `EdgeIndex` and the node&#39;s `NodeIndex`.",16,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`.\nReturns both the edge&#39;s `EdgeIndex` and the node&#39;s `NodeIndex`.",16,null],[11,"node_weight","","Borrow the weight from the node at the given index.",16,null],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",16,null],[11,"raw_nodes","","Read from the internal node array.",16,null],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",16,null],[11,"edge_weight","","Borrow the weight from the edge at the given index.",16,null],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",16,null],[11,"raw_edges","","Read from the internal edge array.",16,null],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",16,null],[11,"index_twice_mut","","Index the `Dag` by two indices.",16,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",16,null],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn&#39;t exist.",16,null],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",16,null],[11,"children","","A &quot;walker&quot; object that may be used to step through the children of the given parent node.",16,null],[11,"recursive_walk","","A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"next","","",18,null],[11,"next","","",19,null],[11,"next","","",20,null],[11,"fmt","","",17,null],[11,"description","","",17,null],[11,"clone","petgraph::graphmap","",21,null],[11,"fmt","","",21,null],[11,"new","","Create a new `GraphMap`.",21,{"inputs":[],"output":{"name":"graphmap"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",21,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graphmap"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",21,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",21,{"inputs":[{"name":"i"}],"output":{"name":"graphmap"}}],[11,"node_count","","Return the number of nodes in the graph.",21,null],[11,"edge_count","","Return the number of edges in the graph.",21,null],[11,"clear","","Remove all nodes and edges",21,null],[11,"add_node","","Add node `n` to the graph.",21,null],[11,"remove_node","","Return `true` if node `n` was removed.",21,null],[11,"contains_node","","Return `true` if the node is contained in the graph.",21,null],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated\ndata `weight`.",21,null],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",21,null],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",21,null],[11,"nodes","","Return an iterator over the nodes of the graph.",21,null],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",21,null],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges,\npaired with the edge weight.",21,null],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",21,null],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",21,null],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",21,null],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"graphmap"}}],[11,"extend","","",21,null],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"next_back","","",23,null],[11,"clone","","",23,null],[11,"next","","",24,null],[11,"next","","",25,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"graphmap"}}],[11,"clone","","",26,null],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",26,null],[11,"partial_cmp","","",26,null],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",26,null],[11,"deref","","",26,null],[11,"hash","","",26,null],[11,"fmt","","",26,null],[11,"hash","petgraph::graph","",27,null],[11,"cmp","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"new","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"index","","",27,null],[11,"end","","",27,{"inputs":[],"output":{"name":"nodeindex"}}],[11,"from","","",27,{"inputs":[{"name":"ix"}],"output":{"name":"nodeindex"}}],[11,"hash","","",28,null],[11,"cmp","","",28,null],[11,"partial_cmp","","",28,null],[11,"lt","","",28,null],[11,"le","","",28,null],[11,"gt","","",28,null],[11,"ge","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"clone","","",28,null],[11,"new","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","","",28,null],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example\nto end an adjacency list.",28,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"fmt","","",28,null],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",29,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",30,null],[11,"source","","Return the source node index.",30,null],[11,"target","","Return the target node index.",30,null],[11,"clone","","",31,null],[11,"clone_from","","",31,null],[11,"fmt","","",31,null],[11,"new","","Create a new `Graph` with directed edges.",31,{"inputs":[],"output":{"name":"graph"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",31,{"inputs":[],"output":{"name":"graph"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",31,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graph"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",31,null],[11,"node_count","","Return the number of nodes (vertices) in the graph.",31,null],[11,"edge_count","","Return the number of edges in the graph.",31,null],[11,"is_directed","","Whether the graph has directed edges or not.",31,null],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",31,null],[11,"node_weight","","Access the weight for node `a`.",31,null],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",31,null],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated\ndata `weight`.",31,null],[11,"update_edge","","Add or update an edge from `a` to `b`.\nIf the edge already exists, its weight is updated.",31,null],[11,"edge_weight","","Access the weight for edge `e`.",31,null],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",31,null],[11,"edge_endpoints","","Access the source and target nodes for `e`.",31,null],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight.\nIf it doesn&#39;t exist in the graph, return `None`.",31,null],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn&#39;t exist.",31,null],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",31,null],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",31,null],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`,\nin either direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",31,null],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge\nweights.",31,null],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction, paired with the respective edge weights.",31,null],[11,"find_edge","","Lookup an edge from `a` to `b`.",31,null],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",31,null],[11,"externals","","Return an iterator over either the nodes without edges to them\n(`Incoming`) or from them (`Outgoing`).",31,null],[11,"node_indices","","Return an iterator over the node indices of the graph",31,null],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",31,null],[11,"edge_indices","","Return an iterator over the edge indices of the graph",31,null],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",31,null],[11,"raw_nodes","","Access the internal node array.",31,null],[11,"raw_edges","","Access the internal edge array.",31,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",31,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",31,null],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",31,null],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",31,null],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of\nnode or edge indices is fine.",31,null],[11,"reverse","","Reverse the direction of all edges",31,null],[11,"clear","","Remove all nodes and edges",31,null],[11,"clear_edges","","Remove all edges",31,null],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure,\nremove the others.",31,null],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure,\nremove the others.",31,null],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",31,{"inputs":[{"name":"i"}],"output":{"name":"graph"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",31,null],[11,"map","","Create a new `Graph` by mapping node and\nedge weights to new values.",31,null],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges.\nA node or edge may be mapped to `None` to exclude it from\nthe resulting graph.",31,null],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments\nare done, so you may want to go over the result to remove or add edges.",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[11,"clone","","",33,null],[11,"detach","","Return a “walker” object that can be used to step through the\nneighbors and edges from the origin node.",33,null],[11,"next","","",34,null],[11,"clone","","",34,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"graph"}}],[11,"index","","",27,null],[11,"is_node_index","","",27,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",28,null],[11,"is_node_index","","",28,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",37,null],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",37,null],[11,"next_node","","",37,null],[11,"next_edge","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","Fetch the next edge index in the walk for graph `g`.",38,null],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",38,null],[11,"fmt","","",39,null],[11,"clone","","",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"next_back","","",39,null],[11,"fmt","","",40,null],[11,"clone","","",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"next_back","","",40,null],[11,"new","petgraph::dot","Create a `Dot` formatting wrapper with default configuration.",41,{"inputs":[{"name":"g"}],"output":{"name":"dot"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",41,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",41,null],[11,"fmt","","",41,null],[11,"fmt","","",41,null],[11,"fmt","","",41,null],[11,"neighbors","petgraph::graph","",31,null],[11,"neighbors","petgraph::graphmap","",21,null],[11,"neighbors","petgraph::visit","",43,null],[11,"neighbors","","",44,null],[11,"neighbors_directed","petgraph::graph","",31,null],[11,"neighbors_directed","petgraph::visit","",44,null],[11,"externals","petgraph::graph","",31,null],[11,"externals","petgraph::visit","",44,null],[11,"visit","fixedbitset","",45,null],[11,"is_visited","","",45,null],[11,"visit","","",45,null],[11,"is_visited","","",45,null],[11,"visit","std::collections::hash::set","",46,null],[11,"is_visited","","",46,null],[11,"visit_map","petgraph::graph","",31,null],[11,"reset_map","","",31,null],[11,"reset_map","petgraph::visit","",44,null],[11,"visit_map","petgraph::graphmap","",21,null],[11,"reset_map","","",21,null],[11,"visit_map","petgraph::visit","",43,null],[11,"visit_map","","",44,null],[11,"adjacency_matrix","petgraph::graphmap","",21,null],[11,"is_adjacent","","",21,null],[11,"fmt","petgraph::visit","",47,null],[11,"clone","","",47,null],[11,"new","","Create a new **Dfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",47,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"dfs"}}],[11,"empty","","Create a new **Dfs** using the graph&#39;s visitor map, and no stack.",47,{"inputs":[{"name":"g"}],"output":{"name":"dfs"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe dfs from a particular node.",47,null],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",47,null],[11,"new","","",48,null],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe DFS traversal from a particular node.",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"new","","Create a new **Bfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",49,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"bfs"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",49,null],[11,"new","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"new","","Create a new `Topo`, using the graph&#39;s visitor map, and put all\ninitial nodes in the to-visit list.",51,{"inputs":[{"name":"g"}],"output":{"name":"topo"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",51,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",51,null],[11,"clone","","",52,null],[11,"from_node","","Create a new `SubTopo`, using the graph&#39;s visitor map, and put single\nnode in the to-visit list.",52,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"subtopo"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",52,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",52,null],[11,"clone","petgraph::unionfind","",53,null],[11,"fmt","","",53,null],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",53,{"inputs":[{"name":"usize"}],"output":{"name":"unionfind"}}],[11,"find","","Return the representative for `x`.",53,null],[11,"find_mut","","Return the representative for `x`.",53,null],[11,"union","","Unify the two sets containing `x` and `y`.",53,null],[11,"into_labeling","","Return a vector mapping each element to its representative.",53,null],[11,"adjacency_matrix","petgraph::graph","",31,null],[11,"is_adjacent","","",31,null],[11,"hash","petgraph","",54,null],[11,"cmp","","",54,null],[11,"partial_cmp","","",54,null],[11,"eq","","",54,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"opposite","","Return the opposite `EdgeDirection`.",54,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"clone","","",56,null],[11,"is_directed","","",55,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",56,{"inputs":[],"output":{"name":"bool"}}],[8,"Walker","dsp","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",57,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given\n**Graph**.",57,null],[11,"next_edge","","The next edge in our walk for the given **Graph**.",57,null],[11,"next_node","","The next node in our walk for the given **Graph**.",57,null],[11,"count","","Counts all the steps in the entire walk of the given graph.",57,null],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",57,null],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",57,null],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",57,null],[11,"nth","","Walks &quot;n&quot; number of steps and produces the resulting edge node pair.",57,null],[11,"nth_edge","","Walks &quot;n&quot; number of steps and produces the resulting edge.",57,null],[11,"nth_node","","Walks &quot;n&quot; number of steps and produces the resulting node.",57,null],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",57,null],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker.\nThe only elements that will be yielded are those that make the predicate evaluate to true.",57,null],[11,"peekable","","Creates a walker that has a `.peek(&amp;graph)` method that returns an optional next neighbor.",57,null],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the\npredicate returns false, that element and all further elements are yielded.",57,null],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the\npredicate returns false for the first time, no further elements will be yielded.",57,null],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further\nsteps.",57,null],[11,"take","","Creates a walker that yields the first n steps of this walk.",57,null],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",57,null],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",57,null],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",57,null],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",57,null],[11,"find_node","","Returns the node index satisfying the specified predicate.",57,null],[11,"cycle","","Repeats the walker endlessly.",57,null],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end\nof the walk.",57,null],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding\nthem. This is often useful for debugging a walker pipeline.",57,null],[11,"iter","","Converts the walker into an iterator yielding index pairs.",57,null],[11,"iter_weights","","Converts the walker into an iterator yielding `(&amp;e, &amp;n)`, where `e` is the edge weight for\nthe next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",57,null],[0,"conv","","Pure functions and traits for converting between i8, i16, I24, i32, I48, i64, u8, u16, U24,\nu32, U48, u64, f32 and f64.",null,null],[0,"i8","dsp::conv","",null,null],[5,"to_i16","dsp::conv::i8","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"f64"}}],[0,"i16","dsp::conv","",null,null],[5,"to_i8","dsp::conv::i16","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i8"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"f64"}}],[0,"i24","dsp::conv","",null,null],[5,"to_i8","dsp::conv::i24","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i16"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"f64"}}],[0,"i32","dsp::conv","",null,null],[5,"to_i8","dsp::conv::i32","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i24"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[0,"i48","dsp::conv","",null,null],[5,"to_i8","dsp::conv::i48","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i32"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"f64"}}],[0,"i64","dsp::conv","",null,null],[5,"to_i8","dsp::conv::i64","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i48"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"f64"}}],[0,"u8","dsp::conv","",null,null],[5,"to_i8","dsp::conv::u8","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i64"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[0,"u16","dsp::conv","",null,null],[5,"to_i8","dsp::conv::u16","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"f64"}}],[0,"u24","dsp::conv","",null,null],[5,"to_i8","dsp::conv::u24","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u16"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"f64"}}],[0,"u32","dsp::conv","",null,null],[5,"to_i8","dsp::conv::u32","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u24"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[0,"u48","dsp::conv","",null,null],[5,"to_i8","dsp::conv::u48","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u32"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"f64"}}],[0,"u64","dsp::conv","",null,null],[5,"to_i8","dsp::conv::u64","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u48"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"f64"}}],[0,"f32","dsp::conv","",null,null],[5,"to_i8","dsp::conv::f32","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u64"}}],[5,"to_f64","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"f64"}}],[0,"f64","dsp::conv","",null,null],[5,"to_i8","dsp::conv::f64","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"f32"}}],[11,"from_sample_","sample::types::i24","",58,{"inputs":[{"name":"i8"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"i16"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"i32"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"i48"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"i64"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"u8"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"u16"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"u24"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"u32"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"u48"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"u64"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"f32"}],"output":{"name":"i24"}}],[11,"from_sample_","","",58,{"inputs":[{"name":"f64"}],"output":{"name":"i24"}}],[11,"from_sample_","sample::types::i48","",59,{"inputs":[{"name":"i8"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"i16"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"i24"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"i32"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"i64"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"u8"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"u16"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"u24"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"u32"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"u48"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"u64"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"f32"}],"output":{"name":"i48"}}],[11,"from_sample_","","",59,{"inputs":[{"name":"f64"}],"output":{"name":"i48"}}],[11,"from_sample_","sample::types::u24","",60,{"inputs":[{"name":"i8"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"i16"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"i24"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"i32"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"i48"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"i64"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"u8"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"u16"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"u32"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"u48"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"u64"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"f32"}],"output":{"name":"u24"}}],[11,"from_sample_","","",60,{"inputs":[{"name":"f64"}],"output":{"name":"u24"}}],[11,"from_sample_","sample::types::u48","",61,{"inputs":[{"name":"i8"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"i16"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"i24"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"i32"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"i48"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"i64"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"u8"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"u16"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"u24"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"u32"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"u64"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"f32"}],"output":{"name":"u48"}}],[11,"from_sample_","","",61,{"inputs":[{"name":"f64"}],"output":{"name":"u48"}}],[11,"from_boxed_sample_slice","alloc::boxed","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"from_boxed_sample_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"to_boxed_sample_slice","","",62,null],[11,"to_boxed_frame_slice","","",62,null],[11,"clone","sample::frame","",63,null],[11,"next","","",63,null],[11,"len","","",63,null],[11,"clone","sample::signal","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",70,null],[11,"clone","","",71,null],[11,"clone","","",72,null],[11,"clone","","",73,null],[11,"clone","","",74,null],[11,"clone","","",75,null],[11,"clone","","",76,null],[11,"clone","","",77,null],[11,"clone","","",78,null],[11,"clone","","",79,null],[11,"clone","","",80,null],[11,"clone","","",81,null],[11,"clone","","",82,null],[11,"clone","","",83,null],[11,"clone","","",84,null],[11,"clone","","",85,null],[11,"next","","",64,null],[11,"next_back","","",64,null],[11,"next","","",65,null],[11,"next","","",66,null],[11,"next","","",67,null],[11,"const_hz","","Create a `ConstHz` iterator which consistently yields &quot;hz / rate&quot;.",68,null],[11,"hz","","Create a variable `hz` some iterator that yields hz and an initial hz.",68,null],[11,"phase","","Construct a `Phase` iterator that, for every `hz` yielded by `self`, yields a phase that is\nstepped by `hz / self.rate.hz`.",70,null],[11,"sine","","A composable alternative to the `signal::sine` function.",70,null],[11,"saw","","A composable alternative to the `signal::saw` function.",70,null],[11,"square","","A composable alternative to the `signal::square` function.",70,null],[11,"noise_simplex","","A composable alternative to the `signal::noise_simplex` function.",70,null],[11,"phase","","Construct a `Phase` iterator that is incremented via the constant step size, `self.step`.",69,null],[11,"sine","","A composable alternative to the `signal::sine` function.",69,null],[11,"saw","","A composable alternative to the `signal::saw` function.",69,null],[11,"square","","A composable alternative to the `signal::square` function.",69,null],[11,"noise_simplex","","A composable alternative to the `signal::noise_simplex` function.",69,null],[11,"step","","",69,null],[11,"step","","",70,null],[11,"next_phase_wrapped_to","","Before yielding the current phase, the internal phase is stepped forward and wrapped via\nthe given value.",71,null],[11,"next_phase","","Calls `next_phase_wrapped_to`, with a wrapping value of `1.0`.",71,null],[11,"sine","","A composable version of the `signal::sine` function.",71,null],[11,"saw","","A composable version of the `signal::saw` function.",71,null],[11,"square","","A composable version of the `signal::square` function.",71,null],[11,"noise_simplex","","A composable version of the `signal::noise_simplex` function.",71,null],[11,"next","","",70,null],[11,"next","","",69,null],[11,"next","","",71,null],[11,"next","","",72,null],[11,"next","","",73,null],[11,"next","","",74,null],[11,"next_sample","","",75,null],[11,"next","","",75,null],[11,"next_sample","","",76,null],[11,"next","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"len","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"len","","",78,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"len","","",80,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"len","","",82,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"len","","",79,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"len","","",81,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"next","","",84,null],[11,"size_hint","","",84,null],[11,"len","","",84,null],[11,"next","","",86,null],[11,"size_hint","","",86,null],[11,"clone","","",86,null],[11,"len","","",86,null],[11,"next","","",85,null],[11,"send","","Produce a new Output node to which the signal `S` will output its frames.",87,null],[11,"pending_frames","","The number of frames that have been requested from the `Signal` `S` by some other `Output`\nthat have not yet been requested by this `Output`.",88,null],[11,"next","","",88,null],[11,"size_hint","","",88,null],[11,"clone","sample::rate","",89,null],[11,"from_hz_to_hz","","Construct a new `Converter` from the source frames and the source and target sample rates\n(in Hz).",89,{"inputs":[{"name":"i"},{"name":"f64"},{"name":"f64"}],"output":{"name":"converter"}}],[11,"scale_playback_hz","","Construct a new `Converter` from the source frames and the amount by which the current\n***playback*** **rate** (not sample rate) should be multiplied to reach the new playback\nrate.",89,{"inputs":[{"name":"i"},{"name":"f64"}],"output":{"name":"converter"}}],[11,"scale_sample_hz","","Construct a new `Converter` from the source frames and the amount by which the current\n***sample*** **rate** (not playback rate) should be multiplied to reach the new sample\nrate.",89,{"inputs":[{"name":"i"},{"name":"f64"}],"output":{"name":"converter"}}],[11,"set_hz_to_hz","","Update the `source_to_target_ratio` internally given the source and target hz.",89,null],[11,"set_playback_hz_scale","","Update the `source_to_target_ratio` internally given a new **playback rate** multiplier.",89,null],[11,"set_sample_hz_scale","","Update the `source_to_target_ratio` internally given a new **sample rate** multiplier.",89,null],[11,"source","","Borrow the `source_frames` Iterator from the `Converter`.",89,null],[11,"source_mut","","Mutably borrow the `source_frames` Iterator from the `Converter`.",89,null],[11,"into_source","","Drop `self` and return the internal `source_frames` Iterator.",89,null],[11,"next_frame","","Yields the next interpolated target frame.",89,null],[11,"next","","",89,null],[11,"size_hint","","",89,null],[11,"default","sample::types::i11","",90,{"inputs":[],"output":{"name":"i11"}}],[11,"cmp","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"from","","",90,{"inputs":[{"name":"i16"}],"output":{"name":"i11"}}],[11,"new","","Construct a new sample if the given value is within range.",90,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",90,{"inputs":[{"name":"i16"}],"output":{"name":"i11"}}],[11,"inner","","Return the internal value used to represent the sample type.",90,null],[11,"add","","",90,null],[11,"sub","","",90,null],[11,"mul","","",90,null],[11,"div","","",90,null],[11,"not","","",90,null],[11,"rem","","",90,null],[11,"shl","","",90,null],[11,"shr","","",90,null],[11,"bitand","","",90,null],[11,"bitor","","",90,null],[11,"bitxor","","",90,null],[11,"from","","",90,{"inputs":[{"name":"i8"}],"output":{"name":"i11"}}],[11,"from","","",90,{"inputs":[{"name":"u8"}],"output":{"name":"i11"}}],[11,"neg","","",90,null],[11,"default","sample::types::u11","",91,{"inputs":[],"output":{"name":"u11"}}],[11,"cmp","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"from","","",91,{"inputs":[{"name":"i16"}],"output":{"name":"u11"}}],[11,"new","","Construct a new sample if the given value is within range.",91,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",91,{"inputs":[{"name":"i16"}],"output":{"name":"u11"}}],[11,"inner","","Return the internal value used to represent the sample type.",91,null],[11,"add","","",91,null],[11,"sub","","",91,null],[11,"mul","","",91,null],[11,"div","","",91,null],[11,"not","","",91,null],[11,"rem","","",91,null],[11,"shl","","",91,null],[11,"shr","","",91,null],[11,"bitand","","",91,null],[11,"bitor","","",91,null],[11,"bitxor","","",91,null],[11,"from","","",91,{"inputs":[{"name":"u8"}],"output":{"name":"u11"}}],[11,"neg","","",91,null],[11,"default","sample::types::i20","",92,{"inputs":[],"output":{"name":"i20"}}],[11,"cmp","","",92,null],[11,"partial_cmp","","",92,null],[11,"lt","","",92,null],[11,"le","","",92,null],[11,"gt","","",92,null],[11,"ge","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"from","","",92,{"inputs":[{"name":"i32"}],"output":{"name":"i20"}}],[11,"new","","Construct a new sample if the given value is within range.",92,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",92,{"inputs":[{"name":"i32"}],"output":{"name":"i20"}}],[11,"inner","","Return the internal value used to represent the sample type.",92,null],[11,"add","","",92,null],[11,"sub","","",92,null],[11,"mul","","",92,null],[11,"div","","",92,null],[11,"not","","",92,null],[11,"rem","","",92,null],[11,"shl","","",92,null],[11,"shr","","",92,null],[11,"bitand","","",92,null],[11,"bitor","","",92,null],[11,"bitxor","","",92,null],[11,"from","","",92,{"inputs":[{"name":"i8"}],"output":{"name":"i20"}}],[11,"from","","",92,{"inputs":[{"name":"i11"}],"output":{"name":"i20"}}],[11,"from","","",92,{"inputs":[{"name":"i16"}],"output":{"name":"i20"}}],[11,"from","","",92,{"inputs":[{"name":"u8"}],"output":{"name":"i20"}}],[11,"from","","",92,{"inputs":[{"name":"u11"}],"output":{"name":"i20"}}],[11,"from","","",92,{"inputs":[{"name":"u16"}],"output":{"name":"i20"}}],[11,"default","sample::types::u20","",93,{"inputs":[],"output":{"name":"u20"}}],[11,"cmp","","",93,null],[11,"partial_cmp","","",93,null],[11,"lt","","",93,null],[11,"le","","",93,null],[11,"gt","","",93,null],[11,"ge","","",93,null],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"from","","",93,{"inputs":[{"name":"i32"}],"output":{"name":"u20"}}],[11,"new","","Construct a new sample if the given value is within range.",93,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",93,{"inputs":[{"name":"i32"}],"output":{"name":"u20"}}],[11,"inner","","Return the internal value used to represent the sample type.",93,null],[11,"add","","",93,null],[11,"sub","","",93,null],[11,"mul","","",93,null],[11,"div","","",93,null],[11,"not","","",93,null],[11,"rem","","",93,null],[11,"shl","","",93,null],[11,"shr","","",93,null],[11,"bitand","","",93,null],[11,"bitor","","",93,null],[11,"bitxor","","",93,null],[11,"from","","",93,{"inputs":[{"name":"u8"}],"output":{"name":"u20"}}],[11,"from","","",93,{"inputs":[{"name":"u16"}],"output":{"name":"u20"}}],[11,"default","sample::types::i24","",58,{"inputs":[],"output":{"name":"i24"}}],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"from","","",58,{"inputs":[{"name":"i32"}],"output":{"name":"i24"}}],[11,"new","","Construct a new sample if the given value is within range.",58,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",58,{"inputs":[{"name":"i32"}],"output":{"name":"i24"}}],[11,"inner","","Return the internal value used to represent the sample type.",58,null],[11,"add","","",58,null],[11,"sub","","",58,null],[11,"mul","","",58,null],[11,"div","","",58,null],[11,"not","","",58,null],[11,"rem","","",58,null],[11,"shl","","",58,null],[11,"shr","","",58,null],[11,"bitand","","",58,null],[11,"bitor","","",58,null],[11,"bitxor","","",58,null],[11,"from","","",58,{"inputs":[{"name":"i8"}],"output":{"name":"i24"}}],[11,"from","","",58,{"inputs":[{"name":"i16"}],"output":{"name":"i24"}}],[11,"from","","",58,{"inputs":[{"name":"i20"}],"output":{"name":"i24"}}],[11,"from","","",58,{"inputs":[{"name":"u8"}],"output":{"name":"i24"}}],[11,"from","","",58,{"inputs":[{"name":"u16"}],"output":{"name":"i24"}}],[11,"from","","",58,{"inputs":[{"name":"u20"}],"output":{"name":"i24"}}],[11,"neg","","",58,null],[11,"default","sample::types::u24","",60,{"inputs":[],"output":{"name":"u24"}}],[11,"cmp","","",60,null],[11,"partial_cmp","","",60,null],[11,"lt","","",60,null],[11,"le","","",60,null],[11,"gt","","",60,null],[11,"ge","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"from","","",60,{"inputs":[{"name":"i32"}],"output":{"name":"u24"}}],[11,"new","","Construct a new sample if the given value is within range.",60,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",60,{"inputs":[{"name":"i32"}],"output":{"name":"u24"}}],[11,"inner","","Return the internal value used to represent the sample type.",60,null],[11,"add","","",60,null],[11,"sub","","",60,null],[11,"mul","","",60,null],[11,"div","","",60,null],[11,"not","","",60,null],[11,"rem","","",60,null],[11,"shl","","",60,null],[11,"shr","","",60,null],[11,"bitand","","",60,null],[11,"bitor","","",60,null],[11,"bitxor","","",60,null],[11,"from","","",60,{"inputs":[{"name":"u8"}],"output":{"name":"u24"}}],[11,"from","","",60,{"inputs":[{"name":"u16"}],"output":{"name":"u24"}}],[11,"from","","",60,{"inputs":[{"name":"u20"}],"output":{"name":"u24"}}],[11,"default","sample::types::i48","",59,{"inputs":[],"output":{"name":"i48"}}],[11,"cmp","","",59,null],[11,"partial_cmp","","",59,null],[11,"lt","","",59,null],[11,"le","","",59,null],[11,"gt","","",59,null],[11,"ge","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"from","","",59,{"inputs":[{"name":"i64"}],"output":{"name":"i48"}}],[11,"new","","Construct a new sample if the given value is within range.",59,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",59,{"inputs":[{"name":"i64"}],"output":{"name":"i48"}}],[11,"inner","","Return the internal value used to represent the sample type.",59,null],[11,"add","","",59,null],[11,"sub","","",59,null],[11,"mul","","",59,null],[11,"div","","",59,null],[11,"not","","",59,null],[11,"rem","","",59,null],[11,"shl","","",59,null],[11,"shr","","",59,null],[11,"bitand","","",59,null],[11,"bitor","","",59,null],[11,"bitxor","","",59,null],[11,"from","","",59,{"inputs":[{"name":"i8"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"i16"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"i20"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"i24"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"i32"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"u8"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"u16"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"u20"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"u24"}],"output":{"name":"i48"}}],[11,"from","","",59,{"inputs":[{"name":"u32"}],"output":{"name":"i48"}}],[11,"neg","","",59,null],[11,"default","sample::types::u48","",61,{"inputs":[],"output":{"name":"u48"}}],[11,"cmp","","",61,null],[11,"partial_cmp","","",61,null],[11,"lt","","",61,null],[11,"le","","",61,null],[11,"gt","","",61,null],[11,"ge","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"from","","",61,{"inputs":[{"name":"i64"}],"output":{"name":"u48"}}],[11,"new","","Construct a new sample if the given value is within range.",61,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",61,{"inputs":[{"name":"i64"}],"output":{"name":"u48"}}],[11,"inner","","Return the internal value used to represent the sample type.",61,null],[11,"add","","",61,null],[11,"sub","","",61,null],[11,"mul","","",61,null],[11,"div","","",61,null],[11,"not","","",61,null],[11,"rem","","",61,null],[11,"shl","","",61,null],[11,"shr","","",61,null],[11,"bitand","","",61,null],[11,"bitor","","",61,null],[11,"bitxor","","",61,null],[11,"from","","",61,{"inputs":[{"name":"u8"}],"output":{"name":"u48"}}],[11,"from","","",61,{"inputs":[{"name":"u16"}],"output":{"name":"u48"}}],[11,"from","","",61,{"inputs":[{"name":"u20"}],"output":{"name":"u48"}}],[11,"from","","",61,{"inputs":[{"name":"u24"}],"output":{"name":"u48"}}],[11,"from","","",61,{"inputs":[{"name":"u32"}],"output":{"name":"u48"}}],[11,"equilibrium","sample::types::i24","",58,{"inputs":[],"output":{"name":"i24"}}],[11,"equilibrium","sample::types::i48","",59,{"inputs":[],"output":{"name":"i48"}}],[11,"equilibrium","sample::types::u24","",60,{"inputs":[],"output":{"name":"u24"}}],[11,"equilibrium","sample::types::u48","",61,{"inputs":[],"output":{"name":"u48"}}],[8,"FromSample","dsp::conv","Similar to the std `From` trait, but specifically for converting between sample types.",null,null],[10,"from_sample_","","",94,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[8,"ToSample","","Similar to the std `Into` trait, but specifically for converting between sample types.",null,null],[10,"to_sample_","","",95,null],[8,"Duplex","","Sample types which may be converted to and from some type `S`.",null,null],[8,"FromSampleSlice","","For converting from a slice of `Sample`s to a slice of `Frame`s.",null,null],[10,"from_sample_slice","","",96,null],[8,"FromSampleSliceMut","","For converting from a mutable slice of `Sample`s to a mutable slice of `Frame`s.",null,null],[10,"from_sample_slice_mut","","",97,null],[8,"FromBoxedSampleSlice","","For converting a boxed slice of `Sample`s to a boxed slice of `Frame`s.",null,null],[10,"from_boxed_sample_slice","","",98,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"FromFrameSlice","","For converting from a slice of `Frame`s to a slice of `Sample`s.",null,null],[10,"from_frame_slice","","",99,null],[8,"FromFrameSliceMut","","For converting from a slice of `Frame`s to a slice of `Sample`s.",null,null],[10,"from_frame_slice_mut","","",100,null],[8,"FromBoxedFrameSlice","","For converting from a boxed slice of `Frame`s to a boxed slice of `Sample`s.",null,null],[10,"from_boxed_frame_slice","","",101,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[8,"ToSampleSlice","","For converting from a slice of `Frame`s to a slice of `Sample`s.",null,null],[10,"to_sample_slice","","",102,null],[8,"ToSampleSliceMut","","For converting from a mutable slice of `Frame`s to a mutable slice of `Sample`s.",null,null],[10,"to_sample_slice_mut","","",103,null],[8,"ToBoxedSampleSlice","","For converting from a boxed slice of `Frame`s to a boxed slice of `Sample`s.",null,null],[10,"to_boxed_sample_slice","","",104,null],[8,"ToFrameSlice","","For converting from a slice of `Sample`s to a slice of `Frame`s.",null,null],[10,"to_frame_slice","","",105,null],[8,"ToFrameSliceMut","","For converting from a mutable slice of `Sample`s to a mutable slice of `Frame`s.",null,null],[10,"to_frame_slice_mut","","",106,null],[8,"ToBoxedFrameSlice","","For converting from a boxed slice of `Sample`s to a boxed slice of `Frame`s.",null,null],[10,"to_boxed_frame_slice","","",107,null],[8,"DuplexSampleSlice","","",null,null],[8,"DuplexFrameSlice","","",null,null],[8,"DuplexSlice","","",null,null],[8,"DuplexSampleSliceMut","","",null,null],[8,"DuplexFrameSliceMut","","",null,null],[8,"DuplexSliceMut","","",null,null],[8,"DuplexBoxedSampleSlice","","",null,null],[8,"DuplexBoxedFrameSlice","","",null,null],[8,"DuplexBoxedSlice","","",null,null],[0,"rate","dsp","The **rate** module provides a [**Converter** type](./struct.Converter.html), for converting\nand interpolating the rate of **Signal**s. This can be useful for both sample rate conversion\nand playback rate multiplication.",null,null],[3,"Converter","dsp::rate","An iterator that converts the rate at which frames are yielded from some given frame Iterator\nvia some given ratio.",null,null],[0,"slice","dsp","This module provides various helper functions for performing operations on slices of frames.",null,null],[5,"to_frame_slice","dsp::slice","Converts the given slice into a slice of `Frame`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"to_frame_slice_mut","","Converts the given mutable slice into a mutable slice of `Frame`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"to_boxed_frame_slice","","Converts the given boxed slice into a boxed slice of `Frame`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"to_sample_slice","","Converts the given slice into a slice of `Sample`s.",null,null],[5,"to_sample_slice_mut","","Converts the given mutable slice of `Frame`s into a mutable slice of `Sample`s.",null,null],[5,"to_boxed_sample_slice","","Converts the given boxed slice into a boxed slice of `Sample`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[5,"from_sample_slice","","Converts the given slice of `Sample`s into some slice `T`.",null,null],[5,"from_sample_slice_mut","","Converts the given mutable slice of `Sample`s into some mutable slice `T`.",null,null],[5,"from_boxed_sample_slice","","Converts the given boxed slice of `Sample`s into some slice `T`.",null,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[5,"from_frame_slice","","Converts the given slice of `Frame`s into some slice `T`.",null,null],[5,"from_frame_slice_mut","","Converts the given slice of mutable `Frame`s into some mutable slice `T`.",null,null],[5,"from_boxed_frame_slice","","Converts the given boxed slice of `Frame`s into some slice `T`.",null,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[5,"map_in_place","","Mutate every element in the slice with the given function.",null,null],[5,"equilibrium","","Sets the slice of frames at the associated `Sample`&#39;s equilibrium value.",null,null],[5,"zip_map_in_place","","Mutate every frame in slice `a` while reading from each frame in slice `b` in lock-step using\nthe given function.",null,null],[5,"write","","Writes every sample in slice `b` to slice `a`.",null,null],[5,"add_in_place","","Adds every sample in slice `b` to every sample in slice `a` respectively.",null,null],[5,"add_in_place_with_amp_per_channel","","Scale the amplitude of each frame in `b` by `amp_per_channel` before summing it onto `a`.",null,null],[0,"signal","dsp","Use the [**Signal** trait](./trait.Signal.html) for working with **Iterator**s that yield\n**Frame**s. To complement the **Iterator** trait, **Signal** provides methods for adding,\nscaling, offsetting, multiplying, clipping and generating frame iterators and more.",null,null],[8,"Signal","dsp::signal","A trait that allows us to treat `Iterator`s that yield `Frame`s as a multi-channel PCM signal.",null,null],[11,"add_amp","","Provides an iterator that yields the sum of the frames yielded by both `other` and `self`\nin lock-step.",108,null],[11,"mul_amp","","Provides an iterator that yields the product of the frames yielded by both `other` and\n`self` in lock-step.",108,null],[11,"offset_amp","","Provides an iterator that offsets the amplitude of every channel in each frame of the\nsignal by some sample value and yields the resulting frames.",108,null],[11,"scale_amp","","Produces an `Iterator` that scales the amplitude of the sample of each channel in every\n`Frame` yielded by `self` by the given amplitude.",108,null],[11,"offset_amp_per_channel","","Produces an `Iterator` that offsets the amplitude of every `Frame` in `self` by the\nrespective amplitudes in each channel of the given `amp_frame`.",108,null],[11,"scale_amp_per_channel","","Produces an `Iterator` that scales the amplitude of every `Frame` in `self` by the\nrespective amplitudes in each channel of the given `amp_frame`.",108,null],[11,"mul_hz","","Multiplies the rate at which frames of `self` are yielded by the given `signal`.",108,null],[11,"from_hz_to_hz","","Converts the rate at which frames of the `Signal` are yielded using interpolation.",108,null],[11,"scale_hz","","Multiplies the rate at which frames of the `Signal` are yielded by the given value.",108,null],[11,"delay","","Delays the `Signal` by the given number of frames.",108,null],[11,"to_samples","","Converts a `Iterator` yielding `Frame`s into an `Iterator` yielding `Sample`s.",108,null],[11,"clip_amp","","Clips the amplitude of each channel in each `Frame` yielded by `self` to the given\nthreshold amplitude.",108,null],[11,"bus","","Moves the `Signal` into a `Bus` from which its output may be divided into multiple other\n`Signal`s in the form of `Output`s.",108,null],[3,"Equilibrium","","An iterator that endlessly yields `Frame`s of type `F` at equilibrium.",null,null],[3,"Gen","","A signal that generates frames using the given function.",null,null],[3,"GenMut","","A signal that generates frames using the given function which may mutate some state.",null,null],[3,"FromInterleavedSamples","","An iterator that converts an iterator of `Sample`s to an iterator of `Frame`s.",null,null],[3,"Rate","","The rate at which phrase a **Signal** is sampled.",null,null],[3,"ConstHz","","A constant phase step size.",null,null],[3,"Hz","","An iterator that yields the step size for a phase.",null,null],[3,"Phase","","An iterator that yields a phase, useful for waveforms like Sine or Saw.",null,null],[3,"Sine","","A sine wave signal generator.",null,null],[3,"Saw","","A saw wave signal generator.",null,null],[3,"Square","","A square wave signal generator.",null,null],[3,"Noise","","A noise signal generator.",null,null],[3,"NoiseSimplex","","A 1D simplex-noise generator.",null,null],[3,"AddAmp","","An iterator that yields the sum of the frames yielded by both `other` and `self` in lock-step.",null,null],[3,"MulAmp","","An iterator that yields the product of the frames yielded by both `other` and `self` in\nlock-step.",null,null],[3,"OffsetAmp","","Provides an iterator that offsets the amplitude of every channel in each frame of the\nsignal by some sample value and yields the resulting frames.",null,null],[3,"ScaleAmp","","An `Iterator` that scales the amplitude of the sample of each channel in every `Frame` yielded\nby `self` by the given amplitude.",null,null],[3,"OffsetAmpPerChannel","","An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes\nin each channel of the given `amp` `Frame`.",null,null],[3,"ScaleAmpPerChannel","","An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes\nin each channel of the given `amp` `Frame`.",null,null],[3,"MulHz","","Multiplies the rate at which frames of `self` are yielded by the given `signal`.",null,null],[3,"Delay","","Delays the `signal` by the given number of frames.",null,null],[3,"ToSamples","","Converts a `Signal` to an `Iterator` yielding `Sample`s of the signal.",null,null],[3,"ClipAmp","","Clips samples in each frame yielded by `signal` to the given threshhold amplitude.",null,null],[3,"Bus","","A type which allows for `send`ing a single `Signal` to multiple outputs.",null,null],[3,"Output","","An output node to which some signal `S` is `Output`ing its frames.",null,null],[5,"equilibrium","","Provides an iterator that endlessly yields `Frame`s of type `F` at equilibrium.",null,{"inputs":[],"output":{"name":"equilibrium"}}],[5,"gen","","A signal that generates frames using the given function.",null,{"inputs":[{"name":"g"}],"output":{"name":"gen"}}],[5,"gen_mut","","A signal that generates frames using the given function which may mutate some state.",null,{"inputs":[{"name":"g"}],"output":{"name":"genmut"}}],[5,"from_interleaved_samples","","An iterator that converts the given `Iterator` yielding `Sample`s to a `Signal` yielding frames\nof type `F`.",null,{"inputs":[{"name":"i"}],"output":{"name":"frominterleavedsamples"}}],[5,"phase","","Creates a `Phase` that continuously steps forward by the given `step` size yielder.",null,{"inputs":[{"name":"s"}],"output":{"name":"phase"}}],[5,"rate","","Creates a frame `Rate` (aka sample rate) representing the rate at which a signal may be\nsampled.",null,{"inputs":[{"name":"f64"}],"output":{"name":"rate"}}],[5,"sine","","Produces a `Signal` that yields a sine wave oscillating at the given hz.",null,{"inputs":[{"name":"phase"}],"output":{"name":"sine"}}],[5,"saw","","Produces a `Signal` that yields a saw wave oscillating at the given hz.",null,{"inputs":[{"name":"phase"}],"output":{"name":"saw"}}],[5,"square","","Produces a `Signal` that yields a square wave oscillating at the given hz.",null,{"inputs":[{"name":"phase"}],"output":{"name":"square"}}],[5,"noise","","Produces a `Signal` that yields random values between -1.0..1.0.",null,{"inputs":[{"name":"u64"}],"output":{"name":"noise"}}],[5,"noise_simplex","","Produces a 1-dimensional simplex noise `Signal`.",null,{"inputs":[{"name":"phase"}],"output":{"name":"noisesimplex"}}],[8,"Step","","Types that may be used to give a phase step size based on some `hz / sample rate`.",null,null],[10,"step","","Yield the phase step size (normally `hz / sampling rate`).",109,null],[8,"DuplexSample","dsp","Sample types which may be converted to and from some type `S`.",null,null],[8,"Frame","","Represents one sample from each channel at a single discrete instance in time within a\nPCM signal.",null,null],[16,"Sample","","The type of PCM sample stored at each channel within the frame.",110,null],[16,"NumChannels","","A typified version of a number of channels in the `Frame`, used for safely mapping frames\nof the same length to other `Frame`s, perhaps with a different `Sample` associated type.",110,null],[16,"Channels","","An iterator yielding the sample in each channel, starting from left (channel 0) and ending\nat the right (channel NumChannels-1).",110,null],[16,"Signed","","A frame type with equilavent number of channels using the associated `Sample::Signed` format.",110,null],[16,"Float","","A frame type with equilavent number of channels using the associated `Sample::Float` format.",110,null],[10,"equilibrium","","The equilibrium value for the wave that this `Sample` type represents. This is normally the\nvalue that is equal distance from both the min and max ranges of the sample.",110,{"inputs":[],"output":{"name":"self"}}],[10,"from_fn","","Create a new `Frame` where the `Sample` for each channel is produced by the given function.",110,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[10,"from_samples","","Create a new `Frame` from a borrowed `Iterator` yielding samples for each channel.",110,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[10,"n_channels","","The total number of channels (and in turn samples) stored within the frame.",110,{"inputs":[],"output":{"name":"usize"}}],[10,"channels","","Converts the frame into an iterator yielding the sample for each channel in the frame.",110,null],[10,"channel","","Yields a reference to the `Sample` of the channel at the given index if there is one.",110,null],[10,"channel_unchecked","","Returns a pointer to the sample of the channel at the given index, without doing bounds\nchecking.",110,null],[10,"map","","Applies the given function to each sample in the `Frame` in channel order and returns the\nresult as a new `Frame`.",110,null],[10,"zip_map","","Calls the given function with the pair of elements at every index and returns the\nresulting Frame.",110,null],[10,"to_signed_frame","","Converts the frame type to the equivalent signal in its associated `Float`ing point format.",110,null],[10,"to_float_frame","","Converts the frame type to the equivalent signal in its associated `Signed` format.",110,null],[11,"offset_amp","","Offsets the amplitude of every channel in the frame by the given `offset` and yields the\nresulting frame.",110,null],[11,"scale_amp","","Multiplies each `Sample` in the `Frame` by the given amplitude and returns the resulting\n`Frame`.",110,null],[11,"add_amp","","Sums each channel in `other` with each channel in `self` and returns the resulting `Frame`.",110,null],[11,"mul_amp","","Multiplies `other` with `self` and returns the resulting `Frame`.",110,null],[8,"FromSample","","Similar to the std `From` trait, but specifically for converting between sample types.",null,null],[10,"from_sample_","","",94,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[8,"ToSample","","Similar to the std `Into` trait, but specifically for converting between sample types.",null,null],[10,"to_sample_","","",95,null],[8,"Sample","","A trait for working generically across different **Sample** format types.",null,null],[16,"Signed","","When summing two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed format. This associated `Addition` type represents the format to\nwhich `Self` should be converted for optimal `Addition` performance.",111,null],[16,"Float","","When multiplying two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed, floating-point format. This associated `Multiplication` type\nrepresents the format to which `Self` should be converted for optimal `Multiplication`\nperformance.",111,null],[10,"equilibrium","","The equilibrium value for the wave that this `Sample` type represents. This is normally the\nvalue that is equal distance from both the min and max ranges of the sample.",111,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","The multiplicative identity of the signal.",111,null],[11,"to_sample","","Convert `self` to any type that implements `FromSample&lt;Self&gt;`.",111,null],[11,"from_sample","","Create a `Self` from any type that implements `ToSample&lt;Self&gt;`.",111,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"to_signed_sample","","Converts `self` to the equivalent `Sample` in the associated `Signed` format.",111,null],[11,"to_float_sample","","Converts `self` to the equivalent `Sample` in the associated `Float` format.",111,null],[11,"add_amp","","Adds (or &quot;offsets&quot;) the amplitude of the `Sample` by the given signed amplitude.",111,null],[11,"mul_amp","","Multiplies (or &quot;scales&quot;) the amplitude of the `Sample` by the given float amplitude.",111,null],[8,"Signal","","A trait that allows us to treat `Iterator`s that yield `Frame`s as a multi-channel PCM signal.",null,null],[11,"add_amp","","Provides an iterator that yields the sum of the frames yielded by both `other` and `self`\nin lock-step.",108,null],[11,"mul_amp","","Provides an iterator that yields the product of the frames yielded by both `other` and\n`self` in lock-step.",108,null],[11,"offset_amp","","Provides an iterator that offsets the amplitude of every channel in each frame of the\nsignal by some sample value and yields the resulting frames.",108,null],[11,"scale_amp","","Produces an `Iterator` that scales the amplitude of the sample of each channel in every\n`Frame` yielded by `self` by the given amplitude.",108,null],[11,"offset_amp_per_channel","","Produces an `Iterator` that offsets the amplitude of every `Frame` in `self` by the\nrespective amplitudes in each channel of the given `amp_frame`.",108,null],[11,"scale_amp_per_channel","","Produces an `Iterator` that scales the amplitude of every `Frame` in `self` by the\nrespective amplitudes in each channel of the given `amp_frame`.",108,null],[11,"mul_hz","","Multiplies the rate at which frames of `self` are yielded by the given `signal`.",108,null],[11,"from_hz_to_hz","","Converts the rate at which frames of the `Signal` are yielded using interpolation.",108,null],[11,"scale_hz","","Multiplies the rate at which frames of the `Signal` are yielded by the given value.",108,null],[11,"delay","","Delays the `Signal` by the given number of frames.",108,null],[11,"to_samples","","Converts a `Iterator` yielding `Frame`s into an `Iterator` yielding `Sample`s.",108,null],[11,"clip_amp","","Clips the amplitude of each channel in each `Frame` yielded by `self` to the given\nthreshold amplitude.",108,null],[11,"bus","","Moves the `Signal` into a `Bus` from which its output may be divided into multiple other\n`Signal`s in the form of `Output`s.",108,null],[3,"Connection","","Describes a connection between two Nodes within the Graph: *input -&gt; connection -&gt; output*.",null,null],[12,"buffer","","The buffer used to pass audio between nodes.",112,null],[3,"Graph","","A directed, acyclic DSP graph.",null,null],[3,"Inputs","","A walker object for walking over nodes that are inputs to some node.",null,null],[3,"Outputs","","A walker object for walking over nodes that are outputs to some node.",null,null],[3,"VisitOrder","","A walker type for walking over a **Graph**&#39;s nodes in the order in which they will visited when\naudio is requested from the **Graph**.",null,null],[3,"VisitOrderReverse","","A walker type for walking over a **Graph**&#39;s nodes in the order in which they will visited when\naudio is requested from the **Graph**.",null,null],[3,"WouldCycle","","The error returned when adding an edge that would create a cycle.",null,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"new","","Constructor for a new dsp Graph.",113,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Constructor for a new dsp Graph with some minimum capacity.",113,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dag","","A reference to the underlying **Dag**.",113,null],[11,"into_dag","","Takes ownership of the **Graph** and returns the underlying **Dag**.",113,null],[11,"pet_graph","","A reference to the internal **Dag**&#39;s underlying **PetGraph**.",113,null],[11,"into_pet_graph","","Takes ownership of the **Graph** and returns the internal **Dag**&#39;s underlying **PetGraph**.",113,null],[11,"node_count","","The total number of nodes in the **Graph**.",113,null],[11,"connection_count","","The total number of connections in the **Graph**.",113,null],[11,"master_index","","Return the **Graph**&#39;s master index if there is one.",113,null],[11,"set_master","","Set the master node for the **Graph**.",113,null],[11,"add_node","","Add a node to the dsp graph.",113,null],[11,"node","","A reference to the node at the given index (or `None` if it doesn&#39;t exist).",113,null],[11,"node_mut","","A mutable reference to the node at the given index (or `None` if it doesn&#39;t exist).",113,null],[11,"raw_nodes","","Read only access to the internal node array.",113,null],[11,"nodes_mut","","An iterator yielding mutable access to all nodes.",113,null],[11,"connection","","A reference to the connection at the given index (or `None` if it doesn&#39;t exist).",113,null],[11,"raw_edges","","Read only access to the internal edge array.",113,null],[11,"index_twice_mut","","Index the **Graph** by two `NodeIndex`s at once.",113,null],[11,"remove_node","","Remove a node from the dsp graph.",113,null],[11,"add_connection","","Adds an edge from `src` to `dest`. That is, `src` is now an input to `dest`.",113,null],[11,"add_connections","","The same as [`add_connection`](./struct.Graph.html#method.add_connection) but adds\nmultiple connections to the **Graph**. Rather than checking for introduced cycles and\nre-preparing the visit order after adding each edge, we only do so after **all** edges are\nadded. Thus, this is a far more efficient alternative to repeatedly calling the\n`add_connection` method.",113,null],[11,"find_connection","","Find and return the index to the edge that describes the connection where `src` is an input\nto `dest`.",113,null],[11,"remove_edge","","Remove the connection described by the edge at the given index.",113,null],[11,"remove_connection","","Find and remove any connection between a and b if there is one, whether it is *a -&gt; b* or\n*b -&gt; a*. We know that their may only be one edge as our API does not allow for creating a\ncyclic graph.",113,null],[11,"add_input","","Add a new node weight to the graph as an input to the wait at the given `dest` node index.",113,null],[11,"add_output","","Add a new node weight to the graph as an output to the wait at the given `src` node index.",113,null],[11,"inputs","","A &quot;walker&quot; object that may be used to step through the inputs of the given node.",113,null],[11,"outputs","","A &quot;walker&quot; object that may be used to step through the outputs of the given node.",113,null],[11,"visit_order","","A &quot;walker&quot; type that may be used to step through all node indices in the order in which\nthey will be visited when audio is requested from the **Graph**.",113,null],[11,"visit_order_rev","","A &quot;walker&quot; type that may be used to step through all node indices in the order in which\nthey will be visited when audio is requested from the **Graph**.",113,null],[11,"remove_all_input_connections","","Remove all incoming connections to the node at the given index.",113,null],[11,"remove_all_output_connections","","Remove all outgoing connections from the node at the given index.",113,null],[11,"clear_disconnected","","Clear all dsp nodes that have no inputs or outputs.",113,null],[11,"clear","","Clear all dsp nodes.",113,null],[11,"prepare_buffers","","Prepare the buffers for all nodes within the Graph.",113,null],[11,"audio_requested_from","","Request audio from the node at the given index.",113,null],[11,"index","","",113,null],[11,"index_mut","","",113,null],[11,"index","","",113,null],[11,"audio_requested","","",113,null],[11,"next","","The next (connection, node) input pair to some node in our walk for the given **Graph**.",115,null],[11,"next_edge","","The next input connection to some node in our walk for the given **Graph**.",115,null],[11,"next_node","","The next input node to some node in our walk for the given **Graph**.",115,null],[11,"next","","The next (connection, node) output pair from some node in our walk for the given **Graph**.",116,null],[11,"next_edge","","The next output connection from some node in our walk for the given **Graph**.",116,null],[11,"next_node","","The next output node from some node in our walk for the given **Graph**.",116,null],[11,"next","","The index of the next node that would be visited during audio requested in our walk of the\ngiven **Graph**&#39;s visit order.",117,null],[11,"next","","The index of the next node that would be visited during audio requested in our walk of the\ngiven **Graph**&#39;s visit order.",118,null],[11,"fmt","","",114,null],[11,"description","","",114,null],[11,"audio_requested","alloc::boxed","",62,null],[11,"dry","","",62,null],[11,"wet","","",62,null],[6,"Dag","dsp","An alias for the **Dag** used within our **Graph**.",null,null],[6,"EdgeIndex","","An alias for our Graph&#39;s Edge Index.",null,null],[6,"NodeIndex","","An alias for our Graph&#39;s Node Index.",null,null],[6,"NodesMut","","An alias for the iterator yielding mutable access to all node weights.",null,null],[6,"PetGraph","","An alias for the **PetGraph** used by our **Graph**&#39;s internal **Dag**.",null,null],[6,"RawEdges","","Read only access to a **Graph**&#39;s internal edge array.",null,null],[6,"RawNodes","","Read only access to a **Graph**&#39;s internal node array.",null,null],[6,"Volume","","The amplitude multiplier.",null,null],[6,"Panning","","The spacial positioning of the node. Currently only supports Stereo or Mono.\n-1.0 = Left.\n 0.0 = Center.\n 1.0 = Right.",null,null],[8,"Node","","Types to be used as a **Node** within the DSP **Graph**.",null,null],[10,"audio_requested","","Request audio from the **Node** given some `sample_hz` (aka sample rate in hertz).\nIf the **Node** has no inputs, the `buffer` will be zeroed.\nIf the **Node** has some inputs, the `buffer` will consist of the inputs summed together.",119,null],[11,"dry","","Following the call to the `Node`&#39;s `audio_requested` method, the `Graph` will sum together\nsome of the original (dry) signal with some of the processed (wet) signal.",119,null],[11,"wet","","Following the call to the `Node`&#39;s `audio_requested` method, the `Graph` will sum together\nsome of the original (dry) signal with some of the processed (wet) signal.",119,null],[11,"dry","","Following the call to the `Node`&#39;s `audio_requested` method, the `Graph` will sum together\nsome of the original (dry) signal with some of the processed (wet) signal.",119,null],[11,"wet","","Following the call to the `Node`&#39;s `audio_requested` method, the `Graph` will sum together\nsome of the original (dry) signal with some of the processed (wet) signal.",119,null]],"paths":[[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"WouldCycle"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Ptr"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Node"],[3,"Edge"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"Dot"],[4,"Config"],[3,"AsUndirected"],[3,"Reversed"],[3,"FixedBitSet"],[3,"HashSet"],[3,"Dfs"],[3,"DfsIter"],[3,"Bfs"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[4,"EdgeDirection"],[4,"Directed"],[4,"Undirected"],[8,"Walker"],[3,"I24"],[3,"I48"],[3,"U24"],[3,"U48"],[3,"Box"],[3,"Channels"],[3,"Equilibrium"],[3,"Gen"],[3,"GenMut"],[3,"FromInterleavedSamples"],[3,"Rate"],[3,"ConstHz"],[3,"Hz"],[3,"Phase"],[3,"Sine"],[3,"Saw"],[3,"Square"],[3,"Noise"],[3,"NoiseSimplex"],[3,"AddAmp"],[3,"MulAmp"],[3,"OffsetAmp"],[3,"ScaleAmp"],[3,"OffsetAmpPerChannel"],[3,"ScaleAmpPerChannel"],[3,"MulHz"],[3,"Delay"],[3,"ClipAmp"],[3,"ToSamples"],[3,"Bus"],[3,"Output"],[3,"Converter"],[3,"I11"],[3,"U11"],[3,"I20"],[3,"U20"],[8,"FromSample"],[8,"ToSample"],[8,"FromSampleSlice"],[8,"FromSampleSliceMut"],[8,"FromBoxedSampleSlice"],[8,"FromFrameSlice"],[8,"FromFrameSliceMut"],[8,"FromBoxedFrameSlice"],[8,"ToSampleSlice"],[8,"ToSampleSliceMut"],[8,"ToBoxedSampleSlice"],[8,"ToFrameSlice"],[8,"ToFrameSliceMut"],[8,"ToBoxedFrameSlice"],[8,"Signal"],[8,"Step"],[8,"Frame"],[8,"Sample"],[3,"Connection"],[3,"Graph"],[3,"WouldCycle"],[3,"Inputs"],[3,"Outputs"],[3,"VisitOrder"],[3,"VisitOrderReverse"],[8,"Node"]]};
searchIndex["sample"] = {"doc":"A crate of fundamentals for audio PCM DSP.","items":[[0,"slice","sample","This module provides various helper functions for performing operations on slices of frames.",null,null],[5,"to_frame_slice","sample::slice","Converts the given slice into a slice of `Frame`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"to_frame_slice_mut","","Converts the given mutable slice into a mutable slice of `Frame`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"to_boxed_frame_slice","","Converts the given boxed slice into a boxed slice of `Frame`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"to_sample_slice","","Converts the given slice into a slice of `Sample`s.",null,null],[5,"to_sample_slice_mut","","Converts the given mutable slice of `Frame`s into a mutable slice of `Sample`s.",null,null],[5,"to_boxed_sample_slice","","Converts the given boxed slice into a boxed slice of `Sample`s.",null,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[5,"from_sample_slice","","Converts the given slice of `Sample`s into some slice `T`.",null,null],[5,"from_sample_slice_mut","","Converts the given mutable slice of `Sample`s into some mutable slice `T`.",null,null],[5,"from_boxed_sample_slice","","Converts the given boxed slice of `Sample`s into some slice `T`.",null,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[5,"from_frame_slice","","Converts the given slice of `Frame`s into some slice `T`.",null,null],[5,"from_frame_slice_mut","","Converts the given slice of mutable `Frame`s into some mutable slice `T`.",null,null],[5,"from_boxed_frame_slice","","Converts the given boxed slice of `Frame`s into some slice `T`.",null,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[5,"map_in_place","","Mutate every element in the slice with the given function.",null,null],[5,"equilibrium","","Sets the slice of frames at the associated `Sample`&#39;s equilibrium value.",null,null],[5,"zip_map_in_place","","Mutate every frame in slice `a` while reading from each frame in slice `b` in lock-step using\nthe given function.",null,null],[5,"write","","Writes every sample in slice `b` to slice `a`.",null,null],[5,"add_in_place","","Adds every sample in slice `b` to every sample in slice `a` respectively.",null,null],[5,"add_in_place_with_amp_per_channel","","Scale the amplitude of each frame in `b` by `amp_per_channel` before summing it onto `a`.",null,null],[0,"conv","sample","Pure functions and traits for converting between i8, i16, I24, i32, I48, i64, u8, u16, U24,\nu32, U48, u64, f32 and f64.",null,null],[0,"i8","sample::conv","",null,null],[5,"to_i16","sample::conv::i8","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"f64"}}],[0,"i16","sample::conv","",null,null],[5,"to_i8","sample::conv::i16","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i8"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"f64"}}],[0,"i24","sample::conv","",null,null],[5,"to_i8","sample::conv::i24","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i16"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i24"}],"output":{"name":"f64"}}],[0,"i32","sample::conv","",null,null],[5,"to_i8","sample::conv::i32","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i24"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[0,"i48","sample::conv","",null,null],[5,"to_i8","sample::conv::i48","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i32"}}],[5,"to_i64","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i48"}],"output":{"name":"f64"}}],[0,"i64","sample::conv","",null,null],[5,"to_i8","sample::conv::i64","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i48"}}],[5,"to_u8","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"f64"}}],[0,"u8","sample::conv","",null,null],[5,"to_i8","sample::conv::u8","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i64"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[0,"u16","sample::conv","",null,null],[5,"to_i8","sample::conv::u16","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"f64"}}],[0,"u24","sample::conv","",null,null],[5,"to_i8","sample::conv::u24","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u16"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u24"}],"output":{"name":"f64"}}],[0,"u32","sample::conv","",null,null],[5,"to_i8","sample::conv::u32","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u24"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[0,"u48","sample::conv","",null,null],[5,"to_i8","sample::conv::u48","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u32"}}],[5,"to_u64","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u48"}],"output":{"name":"f64"}}],[0,"u64","sample::conv","",null,null],[5,"to_i8","sample::conv::u64","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u48"}}],[5,"to_f32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"f32"}}],[5,"to_f64","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"f64"}}],[0,"f32","sample::conv","",null,null],[5,"to_i8","sample::conv::f32","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u64"}}],[5,"to_f64","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"f64"}}],[0,"f64","sample::conv","",null,null],[5,"to_i8","sample::conv::f64","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i8"}}],[5,"to_i16","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i16"}}],[5,"to_i24","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i24"}}],[5,"to_i32","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"to_i48","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i48"}}],[5,"to_i64","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i64"}}],[5,"to_u8","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u8"}}],[5,"to_u16","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u16"}}],[5,"to_u24","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u24"}}],[5,"to_u32","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u32"}}],[5,"to_u48","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u48"}}],[5,"to_u64","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u64"}}],[5,"to_f32","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"f32"}}],[8,"FromSample","sample::conv","Similar to the std `From` trait, but specifically for converting between sample types.",null,null],[10,"from_sample_","","",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[8,"ToSample","","Similar to the std `Into` trait, but specifically for converting between sample types.",null,null],[10,"to_sample_","","",1,null],[8,"Duplex","","Sample types which may be converted to and from some type `S`.",null,null],[8,"FromSampleSlice","","For converting from a slice of `Sample`s to a slice of `Frame`s.",null,null],[10,"from_sample_slice","","",2,null],[8,"FromSampleSliceMut","","For converting from a mutable slice of `Sample`s to a mutable slice of `Frame`s.",null,null],[10,"from_sample_slice_mut","","",3,null],[8,"FromBoxedSampleSlice","","For converting a boxed slice of `Sample`s to a boxed slice of `Frame`s.",null,null],[10,"from_boxed_sample_slice","","",4,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"FromFrameSlice","","For converting from a slice of `Frame`s to a slice of `Sample`s.",null,null],[10,"from_frame_slice","","",5,null],[8,"FromFrameSliceMut","","For converting from a slice of `Frame`s to a slice of `Sample`s.",null,null],[10,"from_frame_slice_mut","","",6,null],[8,"FromBoxedFrameSlice","","For converting from a boxed slice of `Frame`s to a boxed slice of `Sample`s.",null,null],[10,"from_boxed_frame_slice","","",7,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[8,"ToSampleSlice","","For converting from a slice of `Frame`s to a slice of `Sample`s.",null,null],[10,"to_sample_slice","","",8,null],[8,"ToSampleSliceMut","","For converting from a mutable slice of `Frame`s to a mutable slice of `Sample`s.",null,null],[10,"to_sample_slice_mut","","",9,null],[8,"ToBoxedSampleSlice","","For converting from a boxed slice of `Frame`s to a boxed slice of `Sample`s.",null,null],[10,"to_boxed_sample_slice","","",10,null],[8,"ToFrameSlice","","For converting from a slice of `Sample`s to a slice of `Frame`s.",null,null],[10,"to_frame_slice","","",11,null],[8,"ToFrameSliceMut","","For converting from a mutable slice of `Sample`s to a mutable slice of `Frame`s.",null,null],[10,"to_frame_slice_mut","","",12,null],[8,"ToBoxedFrameSlice","","For converting from a boxed slice of `Sample`s to a boxed slice of `Frame`s.",null,null],[10,"to_boxed_frame_slice","","",13,null],[8,"DuplexSampleSlice","","",null,null],[8,"DuplexFrameSlice","","",null,null],[8,"DuplexSlice","","",null,null],[8,"DuplexSampleSliceMut","","",null,null],[8,"DuplexFrameSliceMut","","",null,null],[8,"DuplexSliceMut","","",null,null],[8,"DuplexBoxedSampleSlice","","",null,null],[8,"DuplexBoxedFrameSlice","","",null,null],[8,"DuplexBoxedSlice","","",null,null],[0,"frame","sample","Use the [**Frame**](./trait.Frame.html) trait to remain generic over the number of channels at\na single discrete moment in time.",null,null],[3,"Channels","sample::frame","An iterator that yields the sample for each channel in the frame by value.",null,null],[3,"N1","","A typified version of a number of channels.",null,null],[3,"N2","","A typified version of a number of channels.",null,null],[3,"N3","","A typified version of a number of channels.",null,null],[3,"N4","","A typified version of a number of channels.",null,null],[3,"N5","","A typified version of a number of channels.",null,null],[3,"N6","","A typified version of a number of channels.",null,null],[3,"N7","","A typified version of a number of channels.",null,null],[3,"N8","","A typified version of a number of channels.",null,null],[3,"N9","","A typified version of a number of channels.",null,null],[3,"N10","","A typified version of a number of channels.",null,null],[3,"N11","","A typified version of a number of channels.",null,null],[3,"N12","","A typified version of a number of channels.",null,null],[3,"N13","","A typified version of a number of channels.",null,null],[3,"N14","","A typified version of a number of channels.",null,null],[3,"N15","","A typified version of a number of channels.",null,null],[3,"N16","","A typified version of a number of channels.",null,null],[3,"N17","","A typified version of a number of channels.",null,null],[3,"N18","","A typified version of a number of channels.",null,null],[3,"N19","","A typified version of a number of channels.",null,null],[3,"N20","","A typified version of a number of channels.",null,null],[3,"N21","","A typified version of a number of channels.",null,null],[3,"N22","","A typified version of a number of channels.",null,null],[3,"N23","","A typified version of a number of channels.",null,null],[3,"N24","","A typified version of a number of channels.",null,null],[3,"N25","","A typified version of a number of channels.",null,null],[3,"N26","","A typified version of a number of channels.",null,null],[3,"N27","","A typified version of a number of channels.",null,null],[3,"N28","","A typified version of a number of channels.",null,null],[3,"N29","","A typified version of a number of channels.",null,null],[3,"N30","","A typified version of a number of channels.",null,null],[3,"N31","","A typified version of a number of channels.",null,null],[3,"N32","","A typified version of a number of channels.",null,null],[6,"Mono","","",null,null],[6,"Stereo","","",null,null],[8,"Frame","","Represents one sample from each channel at a single discrete instance in time within a\nPCM signal.",null,null],[16,"Sample","","The type of PCM sample stored at each channel within the frame.",14,null],[16,"NumChannels","","A typified version of a number of channels in the `Frame`, used for safely mapping frames\nof the same length to other `Frame`s, perhaps with a different `Sample` associated type.",14,null],[16,"Channels","","An iterator yielding the sample in each channel, starting from left (channel 0) and ending\nat the right (channel NumChannels-1).",14,null],[16,"Signed","","A frame type with equilavent number of channels using the associated `Sample::Signed` format.",14,null],[16,"Float","","A frame type with equilavent number of channels using the associated `Sample::Float` format.",14,null],[10,"equilibrium","","The equilibrium value for the wave that this `Sample` type represents. This is normally the\nvalue that is equal distance from both the min and max ranges of the sample.",14,{"inputs":[],"output":{"name":"self"}}],[10,"from_fn","","Create a new `Frame` where the `Sample` for each channel is produced by the given function.",14,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[10,"from_samples","","Create a new `Frame` from a borrowed `Iterator` yielding samples for each channel.",14,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[10,"n_channels","","The total number of channels (and in turn samples) stored within the frame.",14,{"inputs":[],"output":{"name":"usize"}}],[10,"channels","","Converts the frame into an iterator yielding the sample for each channel in the frame.",14,null],[10,"channel","","Yields a reference to the `Sample` of the channel at the given index if there is one.",14,null],[10,"channel_unchecked","","Returns a pointer to the sample of the channel at the given index, without doing bounds\nchecking.",14,null],[10,"map","","Applies the given function to each sample in the `Frame` in channel order and returns the\nresult as a new `Frame`.",14,null],[10,"zip_map","","Calls the given function with the pair of elements at every index and returns the\nresulting Frame.",14,null],[10,"to_signed_frame","","Converts the frame type to the equivalent signal in its associated `Float`ing point format.",14,null],[10,"to_float_frame","","Converts the frame type to the equivalent signal in its associated `Signed` format.",14,null],[11,"offset_amp","","Offsets the amplitude of every channel in the frame by the given `offset` and yields the\nresulting frame.",14,null],[11,"scale_amp","","Multiplies each `Sample` in the `Frame` by the given amplitude and returns the resulting\n`Frame`.",14,null],[11,"add_amp","","Sums each channel in `other` with each channel in `self` and returns the resulting `Frame`.",14,null],[11,"mul_amp","","Multiplies `other` with `self` and returns the resulting `Frame`.",14,null],[8,"NumChannels","","Restricts the types that may be used as the `Frame::NumChannels` associated type.",null,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"len","","",15,null],[0,"signal","sample","Use the [**Signal** trait](./trait.Signal.html) for working with **Iterator**s that yield\n**Frame**s. To complement the **Iterator** trait, **Signal** provides methods for adding,\nscaling, offsetting, multiplying, clipping and generating frame iterators and more.",null,null],[3,"Equilibrium","sample::signal","An iterator that endlessly yields `Frame`s of type `F` at equilibrium.",null,null],[3,"Gen","","A signal that generates frames using the given function.",null,null],[3,"GenMut","","A signal that generates frames using the given function which may mutate some state.",null,null],[3,"FromInterleavedSamples","","An iterator that converts an iterator of `Sample`s to an iterator of `Frame`s.",null,null],[3,"Rate","","The rate at which phrase a **Signal** is sampled.",null,null],[3,"ConstHz","","A constant phase step size.",null,null],[3,"Hz","","An iterator that yields the step size for a phase.",null,null],[3,"Phase","","An iterator that yields a phase, useful for waveforms like Sine or Saw.",null,null],[3,"Sine","","A sine wave signal generator.",null,null],[3,"Saw","","A saw wave signal generator.",null,null],[3,"Square","","A square wave signal generator.",null,null],[3,"Noise","","A noise signal generator.",null,null],[3,"NoiseSimplex","","A 1D simplex-noise generator.",null,null],[3,"AddAmp","","An iterator that yields the sum of the frames yielded by both `other` and `self` in lock-step.",null,null],[3,"MulAmp","","An iterator that yields the product of the frames yielded by both `other` and `self` in\nlock-step.",null,null],[3,"OffsetAmp","","Provides an iterator that offsets the amplitude of every channel in each frame of the\nsignal by some sample value and yields the resulting frames.",null,null],[3,"ScaleAmp","","An `Iterator` that scales the amplitude of the sample of each channel in every `Frame` yielded\nby `self` by the given amplitude.",null,null],[3,"OffsetAmpPerChannel","","An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes\nin each channel of the given `amp` `Frame`.",null,null],[3,"ScaleAmpPerChannel","","An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes\nin each channel of the given `amp` `Frame`.",null,null],[3,"MulHz","","Multiplies the rate at which frames of `self` are yielded by the given `signal`.",null,null],[3,"Delay","","Delays the `signal` by the given number of frames.",null,null],[3,"ToSamples","","Converts a `Signal` to an `Iterator` yielding `Sample`s of the signal.",null,null],[3,"ClipAmp","","Clips samples in each frame yielded by `signal` to the given threshhold amplitude.",null,null],[3,"Bus","","A type which allows for `send`ing a single `Signal` to multiple outputs.",null,null],[3,"Output","","An output node to which some signal `S` is `Output`ing its frames.",null,null],[5,"equilibrium","","Provides an iterator that endlessly yields `Frame`s of type `F` at equilibrium.",null,{"inputs":[],"output":{"name":"equilibrium"}}],[5,"gen","","A signal that generates frames using the given function.",null,{"inputs":[{"name":"g"}],"output":{"name":"gen"}}],[5,"gen_mut","","A signal that generates frames using the given function which may mutate some state.",null,{"inputs":[{"name":"g"}],"output":{"name":"genmut"}}],[5,"from_interleaved_samples","","An iterator that converts the given `Iterator` yielding `Sample`s to a `Signal` yielding frames\nof type `F`.",null,{"inputs":[{"name":"i"}],"output":{"name":"frominterleavedsamples"}}],[5,"phase","","Creates a `Phase` that continuously steps forward by the given `step` size yielder.",null,{"inputs":[{"name":"s"}],"output":{"name":"phase"}}],[5,"rate","","Creates a frame `Rate` (aka sample rate) representing the rate at which a signal may be\nsampled.",null,{"inputs":[{"name":"f64"}],"output":{"name":"rate"}}],[5,"sine","","Produces a `Signal` that yields a sine wave oscillating at the given hz.",null,{"inputs":[{"name":"phase"}],"output":{"name":"sine"}}],[5,"saw","","Produces a `Signal` that yields a saw wave oscillating at the given hz.",null,{"inputs":[{"name":"phase"}],"output":{"name":"saw"}}],[5,"square","","Produces a `Signal` that yields a square wave oscillating at the given hz.",null,{"inputs":[{"name":"phase"}],"output":{"name":"square"}}],[5,"noise","","Produces a `Signal` that yields random values between -1.0..1.0.",null,{"inputs":[{"name":"u64"}],"output":{"name":"noise"}}],[5,"noise_simplex","","Produces a 1-dimensional simplex noise `Signal`.",null,{"inputs":[{"name":"phase"}],"output":{"name":"noisesimplex"}}],[8,"Signal","","A trait that allows us to treat `Iterator`s that yield `Frame`s as a multi-channel PCM signal.",null,null],[11,"add_amp","","Provides an iterator that yields the sum of the frames yielded by both `other` and `self`\nin lock-step.",16,null],[11,"mul_amp","","Provides an iterator that yields the product of the frames yielded by both `other` and\n`self` in lock-step.",16,null],[11,"offset_amp","","Provides an iterator that offsets the amplitude of every channel in each frame of the\nsignal by some sample value and yields the resulting frames.",16,null],[11,"scale_amp","","Produces an `Iterator` that scales the amplitude of the sample of each channel in every\n`Frame` yielded by `self` by the given amplitude.",16,null],[11,"offset_amp_per_channel","","Produces an `Iterator` that offsets the amplitude of every `Frame` in `self` by the\nrespective amplitudes in each channel of the given `amp_frame`.",16,null],[11,"scale_amp_per_channel","","Produces an `Iterator` that scales the amplitude of every `Frame` in `self` by the\nrespective amplitudes in each channel of the given `amp_frame`.",16,null],[11,"mul_hz","","Multiplies the rate at which frames of `self` are yielded by the given `signal`.",16,null],[11,"from_hz_to_hz","","Converts the rate at which frames of the `Signal` are yielded using interpolation.",16,null],[11,"scale_hz","","Multiplies the rate at which frames of the `Signal` are yielded by the given value.",16,null],[11,"delay","","Delays the `Signal` by the given number of frames.",16,null],[11,"to_samples","","Converts a `Iterator` yielding `Frame`s into an `Iterator` yielding `Sample`s.",16,null],[11,"clip_amp","","Clips the amplitude of each channel in each `Frame` yielded by `self` to the given\nthreshold amplitude.",16,null],[11,"bus","","Moves the `Signal` into a `Bus` from which its output may be divided into multiple other\n`Signal`s in the form of `Output`s.",16,null],[8,"Step","","Types that may be used to give a phase step size based on some `hz / sample rate`.",null,null],[10,"step","","Yield the phase step size (normally `hz / sampling rate`).",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"next","","",19,null],[11,"next","","",20,null],[11,"next","","",21,null],[11,"const_hz","","Create a `ConstHz` iterator which consistently yields &quot;hz / rate&quot;.",22,null],[11,"hz","","Create a variable `hz` some iterator that yields hz and an initial hz.",22,null],[11,"phase","","Construct a `Phase` iterator that, for every `hz` yielded by `self`, yields a phase that is\nstepped by `hz / self.rate.hz`.",24,null],[11,"sine","","A composable alternative to the `signal::sine` function.",24,null],[11,"saw","","A composable alternative to the `signal::saw` function.",24,null],[11,"square","","A composable alternative to the `signal::square` function.",24,null],[11,"noise_simplex","","A composable alternative to the `signal::noise_simplex` function.",24,null],[11,"phase","","Construct a `Phase` iterator that is incremented via the constant step size, `self.step`.",23,null],[11,"sine","","A composable alternative to the `signal::sine` function.",23,null],[11,"saw","","A composable alternative to the `signal::saw` function.",23,null],[11,"square","","A composable alternative to the `signal::square` function.",23,null],[11,"noise_simplex","","A composable alternative to the `signal::noise_simplex` function.",23,null],[11,"step","","",23,null],[11,"step","","",24,null],[11,"next_phase_wrapped_to","","Before yielding the current phase, the internal phase is stepped forward and wrapped via\nthe given value.",25,null],[11,"next_phase","","Calls `next_phase_wrapped_to`, with a wrapping value of `1.0`.",25,null],[11,"sine","","A composable version of the `signal::sine` function.",25,null],[11,"saw","","A composable version of the `signal::saw` function.",25,null],[11,"square","","A composable version of the `signal::square` function.",25,null],[11,"noise_simplex","","A composable version of the `signal::noise_simplex` function.",25,null],[11,"next","","",24,null],[11,"next","","",23,null],[11,"next","","",25,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"next","","",28,null],[11,"next_sample","","",29,null],[11,"next","","",29,null],[11,"next_sample","","",30,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"len","","",31,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"len","","",32,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"len","","",34,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"len","","",36,null],[11,"next","","",33,null],[11,"size_hint","","",33,null],[11,"len","","",33,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"len","","",35,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"len","","",38,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"clone","","",40,null],[11,"len","","",40,null],[11,"next","","",39,null],[11,"send","","Produce a new Output node to which the signal `S` will output its frames.",41,null],[11,"pending_frames","","The number of frames that have been requested from the `Signal` `S` by some other `Output`\nthat have not yet been requested by this `Output`.",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[0,"rate","sample","The **rate** module provides a [**Converter** type](./struct.Converter.html), for converting\nand interpolating the rate of **Signal**s. This can be useful for both sample rate conversion\nand playback rate multiplication.",null,null],[3,"Converter","sample::rate","An iterator that converts the rate at which frames are yielded from some given frame Iterator\nvia some given ratio.",null,null],[11,"clone","","",43,null],[11,"from_hz_to_hz","","Construct a new `Converter` from the source frames and the source and target sample rates\n(in Hz).",43,{"inputs":[{"name":"i"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"scale_playback_hz","","Construct a new `Converter` from the source frames and the amount by which the current\n***playback*** **rate** (not sample rate) should be multiplied to reach the new playback\nrate.",43,{"inputs":[{"name":"i"},{"name":"f64"}],"output":{"name":"self"}}],[11,"scale_sample_hz","","Construct a new `Converter` from the source frames and the amount by which the current\n***sample*** **rate** (not playback rate) should be multiplied to reach the new sample\nrate.",43,{"inputs":[{"name":"i"},{"name":"f64"}],"output":{"name":"self"}}],[11,"set_hz_to_hz","","Update the `source_to_target_ratio` internally given the source and target hz.",43,null],[11,"set_playback_hz_scale","","Update the `source_to_target_ratio` internally given a new **playback rate** multiplier.",43,null],[11,"set_sample_hz_scale","","Update the `source_to_target_ratio` internally given a new **sample rate** multiplier.",43,null],[11,"source","","Borrow the `source_frames` Iterator from the `Converter`.",43,null],[11,"source_mut","","Mutably borrow the `source_frames` Iterator from the `Converter`.",43,null],[11,"into_source","","Drop `self` and return the internal `source_frames` Iterator.",43,null],[11,"next_frame","","Yields the next interpolated target frame.",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[0,"types","sample","A collection of custom, non-std **Sample** types.",null,null],[0,"i11","sample::types","",null,null],[3,"I11","sample::types::i11","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",44,{"inputs":[],"output":{"name":"i11"}}],[11,"cmp","","",44,null],[11,"partial_cmp","","",44,null],[11,"lt","","",44,null],[11,"le","","",44,null],[11,"gt","","",44,null],[11,"ge","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"from","","",44,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",44,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",44,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",44,null],[11,"add","","",44,null],[11,"sub","","",44,null],[11,"mul","","",44,null],[11,"div","","",44,null],[11,"not","","",44,null],[11,"rem","","",44,null],[11,"shl","","",44,null],[11,"shr","","",44,null],[11,"bitand","","",44,null],[11,"bitor","","",44,null],[11,"bitxor","","",44,null],[11,"from","","",44,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",44,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"neg","","",44,null],[0,"u11","sample::types","",null,null],[3,"U11","sample::types::u11","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",45,{"inputs":[],"output":{"name":"u11"}}],[11,"cmp","","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"from","","",45,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",45,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",45,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",45,null],[11,"add","","",45,null],[11,"sub","","",45,null],[11,"mul","","",45,null],[11,"div","","",45,null],[11,"not","","",45,null],[11,"rem","","",45,null],[11,"shl","","",45,null],[11,"shr","","",45,null],[11,"bitand","","",45,null],[11,"bitor","","",45,null],[11,"bitxor","","",45,null],[11,"from","","",45,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"neg","","",45,null],[0,"i20","sample::types","",null,null],[3,"I20","sample::types::i20","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",46,{"inputs":[],"output":{"name":"i20"}}],[11,"cmp","","",46,null],[11,"partial_cmp","","",46,null],[11,"lt","","",46,null],[11,"le","","",46,null],[11,"gt","","",46,null],[11,"ge","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"from","","",46,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",46,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",46,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",46,null],[11,"add","","",46,null],[11,"sub","","",46,null],[11,"mul","","",46,null],[11,"div","","",46,null],[11,"not","","",46,null],[11,"rem","","",46,null],[11,"shl","","",46,null],[11,"shr","","",46,null],[11,"bitand","","",46,null],[11,"bitor","","",46,null],[11,"bitxor","","",46,null],[11,"from","","",46,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"i11"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"u11"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[0,"u20","sample::types","",null,null],[3,"U20","sample::types::u20","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",47,{"inputs":[],"output":{"name":"u20"}}],[11,"cmp","","",47,null],[11,"partial_cmp","","",47,null],[11,"lt","","",47,null],[11,"le","","",47,null],[11,"gt","","",47,null],[11,"ge","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"from","","",47,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",47,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",47,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",47,null],[11,"add","","",47,null],[11,"sub","","",47,null],[11,"mul","","",47,null],[11,"div","","",47,null],[11,"not","","",47,null],[11,"rem","","",47,null],[11,"shl","","",47,null],[11,"shr","","",47,null],[11,"bitand","","",47,null],[11,"bitor","","",47,null],[11,"bitxor","","",47,null],[11,"from","","",47,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",47,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[0,"i24","sample::types","",null,null],[3,"I24","sample::types::i24","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",48,{"inputs":[],"output":{"name":"i24"}}],[11,"cmp","","",48,null],[11,"partial_cmp","","",48,null],[11,"lt","","",48,null],[11,"le","","",48,null],[11,"gt","","",48,null],[11,"ge","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"from","","",48,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",48,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",48,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",48,null],[11,"add","","",48,null],[11,"sub","","",48,null],[11,"mul","","",48,null],[11,"div","","",48,null],[11,"not","","",48,null],[11,"rem","","",48,null],[11,"shl","","",48,null],[11,"shr","","",48,null],[11,"bitand","","",48,null],[11,"bitor","","",48,null],[11,"bitxor","","",48,null],[11,"from","","",48,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"i20"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"u20"}],"output":{"name":"self"}}],[11,"neg","","",48,null],[0,"u24","sample::types","",null,null],[3,"U24","sample::types::u24","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",49,{"inputs":[],"output":{"name":"u24"}}],[11,"cmp","","",49,null],[11,"partial_cmp","","",49,null],[11,"lt","","",49,null],[11,"le","","",49,null],[11,"gt","","",49,null],[11,"ge","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"from","","",49,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",49,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",49,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",49,null],[11,"add","","",49,null],[11,"sub","","",49,null],[11,"mul","","",49,null],[11,"div","","",49,null],[11,"not","","",49,null],[11,"rem","","",49,null],[11,"shl","","",49,null],[11,"shr","","",49,null],[11,"bitand","","",49,null],[11,"bitor","","",49,null],[11,"bitxor","","",49,null],[11,"from","","",49,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",49,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",49,{"inputs":[{"name":"u20"}],"output":{"name":"self"}}],[0,"i48","sample::types","",null,null],[3,"I48","sample::types::i48","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",50,{"inputs":[],"output":{"name":"i48"}}],[11,"cmp","","",50,null],[11,"partial_cmp","","",50,null],[11,"lt","","",50,null],[11,"le","","",50,null],[11,"gt","","",50,null],[11,"ge","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"from","","",50,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",50,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",50,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",50,null],[11,"add","","",50,null],[11,"sub","","",50,null],[11,"mul","","",50,null],[11,"div","","",50,null],[11,"not","","",50,null],[11,"rem","","",50,null],[11,"shl","","",50,null],[11,"shr","","",50,null],[11,"bitand","","",50,null],[11,"bitor","","",50,null],[11,"bitxor","","",50,null],[11,"from","","",50,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"i20"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"i24"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"u20"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"u24"}],"output":{"name":"self"}}],[11,"from","","",50,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"neg","","",50,null],[0,"u48","sample::types","",null,null],[3,"U48","sample::types::u48","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"EQUILIBRIUM","","",null,null],[11,"default","","",51,{"inputs":[],"output":{"name":"u48"}}],[11,"cmp","","",51,null],[11,"partial_cmp","","",51,null],[11,"lt","","",51,null],[11,"le","","",51,null],[11,"gt","","",51,null],[11,"ge","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"from","","",51,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"new","","Construct a new sample if the given value is within range.",51,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"new_unchecked","","Constructs a new sample without checking for overflowing.",51,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"inner","","Return the internal value used to represent the sample type.",51,null],[11,"add","","",51,null],[11,"sub","","",51,null],[11,"mul","","",51,null],[11,"div","","",51,null],[11,"not","","",51,null],[11,"rem","","",51,null],[11,"shl","","",51,null],[11,"shr","","",51,null],[11,"bitand","","",51,null],[11,"bitor","","",51,null],[11,"bitxor","","",51,null],[11,"from","","",51,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",51,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",51,{"inputs":[{"name":"u20"}],"output":{"name":"self"}}],[11,"from","","",51,{"inputs":[{"name":"u24"}],"output":{"name":"self"}}],[11,"from","","",51,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[6,"Box","sample","",null,null],[8,"Sample","","A trait for working generically across different **Sample** format types.",null,null],[16,"Signed","","When summing two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed format. This associated `Addition` type represents the format to\nwhich `Self` should be converted for optimal `Addition` performance.",52,null],[16,"Float","","When multiplying two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed, floating-point format. This associated `Multiplication` type\nrepresents the format to which `Self` should be converted for optimal `Multiplication`\nperformance.",52,null],[10,"equilibrium","","The equilibrium value for the wave that this `Sample` type represents. This is normally the\nvalue that is equal distance from both the min and max ranges of the sample.",52,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","The multiplicative identity of the signal.",52,{"inputs":[],"output":{"name":"float"}}],[11,"to_sample","","Convert `self` to any type that implements `FromSample&lt;Self&gt;`.",52,null],[11,"from_sample","","Create a `Self` from any type that implements `ToSample&lt;Self&gt;`.",52,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"to_signed_sample","","Converts `self` to the equivalent `Sample` in the associated `Signed` format.",52,null],[11,"to_float_sample","","Converts `self` to the equivalent `Sample` in the associated `Float` format.",52,null],[11,"add_amp","","Adds (or &quot;offsets&quot;) the amplitude of the `Sample` by the given signed amplitude.",52,null],[11,"mul_amp","","Multiplies (or &quot;scales&quot;) the amplitude of the `Sample` by the given float amplitude.",52,null],[8,"SignedSample","","Integral and floating-point **Sample** format types whose equilibrium is at 0.",null,null],[8,"FloatSample","","Sample format types represented as floating point numbers.",null,null],[10,"identity","","Represents the multiplicative identity of the floating point signal.",53,{"inputs":[],"output":{"name":"self"}}],[10,"sample_sqrt","","Calculate the square root of `Self`. A convenience generic wrapper around `.sqrt()`.",53,null],[11,"equilibrium","sample::types::i24","",48,{"inputs":[],"output":{"name":"self"}}],[11,"equilibrium","sample::types::i48","",50,{"inputs":[],"output":{"name":"self"}}],[11,"equilibrium","sample::types::u24","",49,{"inputs":[],"output":{"name":"self"}}],[11,"equilibrium","sample::types::u48","",51,{"inputs":[],"output":{"name":"self"}}],[11,"from_sample_","sample::types::i24","",48,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"i48"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"u24"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"u48"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from_sample_","","",48,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_sample_","sample::types::i48","",50,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"i24"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"u24"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"u48"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from_sample_","","",50,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_sample_","sample::types::u24","",49,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"i24"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"i48"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"u48"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from_sample_","","",49,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_sample_","sample::types::u48","",51,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"i24"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"i48"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"u24"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from_sample_","","",51,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_boxed_sample_slice","sample","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null],[11,"from_boxed_sample_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_boxed_frame_slice","","",54,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"to_boxed_sample_slice","","",54,null],[11,"to_boxed_frame_slice","","",54,null]],"paths":[[8,"FromSample"],[8,"ToSample"],[8,"FromSampleSlice"],[8,"FromSampleSliceMut"],[8,"FromBoxedSampleSlice"],[8,"FromFrameSlice"],[8,"FromFrameSliceMut"],[8,"FromBoxedFrameSlice"],[8,"ToSampleSlice"],[8,"ToSampleSliceMut"],[8,"ToBoxedSampleSlice"],[8,"ToFrameSlice"],[8,"ToFrameSliceMut"],[8,"ToBoxedFrameSlice"],[8,"Frame"],[3,"Channels"],[8,"Signal"],[8,"Step"],[3,"Equilibrium"],[3,"Gen"],[3,"GenMut"],[3,"FromInterleavedSamples"],[3,"Rate"],[3,"ConstHz"],[3,"Hz"],[3,"Phase"],[3,"Sine"],[3,"Saw"],[3,"Square"],[3,"Noise"],[3,"NoiseSimplex"],[3,"AddAmp"],[3,"MulAmp"],[3,"OffsetAmp"],[3,"ScaleAmp"],[3,"OffsetAmpPerChannel"],[3,"ScaleAmpPerChannel"],[3,"MulHz"],[3,"Delay"],[3,"ClipAmp"],[3,"ToSamples"],[3,"Bus"],[3,"Output"],[3,"Converter"],[3,"I11"],[3,"U11"],[3,"I20"],[3,"U20"],[3,"I24"],[3,"U24"],[3,"I48"],[3,"U48"],[8,"Sample"],[8,"FloatSample"],[6,"Box"]]};
searchIndex["daggy"] = {"doc":"**daggy** is a directed acyclic graph data structure library.","items":[[0,"algo","daggy::petgraph","Graph algorithms.",null,null],[5,"is_cyclic_undirected","daggy::petgraph::algo","Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic","","**Deprecated: Renamed to `is_cyclic_undirected`.**",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic_directed","","Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"toposort","","Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"scc","","Compute the *strongly connected components* using Kosaraju&#39;s algorithm.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"condensation","","Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"name":"graph"}}],[5,"connected_components","","Return the number of connected components of the graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[5,"min_spanning_tree","","Compute a *minimum spanning tree* of a graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[5,"dijkstra","","Dijkstra&#39;s shortest path algorithm.",null,null],[5,"is_isomorphic_matching","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"is_isomorphic","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[0,"graphmap","daggy::petgraph","`GraphMap&lt;N, E&gt;` is an undirected graph where node values are mapping keys.",null,null],[11,"new","petgraph::graphmap","Create a new `GraphMap`.",0,{"inputs":[],"output":{"name":"graphmap"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graphmap"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",0,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",0,{"inputs":[{"name":"i"}],"output":{"name":"graphmap"}}],[11,"node_count","","Return the number of nodes in the graph.",0,null],[11,"edge_count","","Return the number of edges in the graph.",0,null],[11,"clear","","Remove all nodes and edges",0,null],[11,"add_node","","Add node `n` to the graph.",0,null],[11,"remove_node","","Return `true` if node `n` was removed.",0,null],[11,"contains_node","","Return `true` if the node is contained in the graph.",0,null],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated\ndata `weight`.",0,null],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",0,null],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",0,null],[11,"nodes","","Return an iterator over the nodes of the graph.",0,null],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",0,null],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges,\npaired with the edge weight.",0,null],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",0,null],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",0,null],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"graphmap"}}],[11,"extend","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next_back","","",2,null],[11,"clone","","",2,null],[11,"next","","",3,null],[11,"next","","",4,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"graphmap"}}],[11,"clone","","",5,null],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",5,null],[11,"deref","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"hash","petgraph::graph","",6,null],[11,"cmp","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"new","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"index","","",6,null],[11,"end","","",6,{"inputs":[],"output":{"name":"nodeindex"}}],[11,"from","","",6,{"inputs":[{"name":"ix"}],"output":{"name":"nodeindex"}}],[11,"hash","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","","",7,null],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example\nto end an adjacency list.",7,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",9,null],[11,"source","","Return the source node index.",9,null],[11,"target","","Return the target node index.",9,null],[11,"clone","","",10,null],[11,"clone_from","","",10,null],[11,"fmt","","",10,null],[11,"new","","Create a new `Graph` with directed edges.",10,{"inputs":[],"output":{"name":"graph"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",10,{"inputs":[],"output":{"name":"graph"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",10,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graph"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",10,null],[11,"node_count","","Return the number of nodes (vertices) in the graph.",10,null],[11,"edge_count","","Return the number of edges in the graph.",10,null],[11,"is_directed","","Whether the graph has directed edges or not.",10,null],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",10,null],[11,"node_weight","","Access the weight for node `a`.",10,null],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",10,null],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated\ndata `weight`.",10,null],[11,"update_edge","","Add or update an edge from `a` to `b`.\nIf the edge already exists, its weight is updated.",10,null],[11,"edge_weight","","Access the weight for edge `e`.",10,null],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",10,null],[11,"edge_endpoints","","Access the source and target nodes for `e`.",10,null],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight.\nIf it doesn&#39;t exist in the graph, return `None`.",10,null],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn&#39;t exist.",10,null],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",10,null],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",10,null],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`,\nin either direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",10,null],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge\nweights.",10,null],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction, paired with the respective edge weights.",10,null],[11,"find_edge","","Lookup an edge from `a` to `b`.",10,null],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",10,null],[11,"externals","","Return an iterator over either the nodes without edges to them\n(`Incoming`) or from them (`Outgoing`).",10,null],[11,"node_indices","","Return an iterator over the node indices of the graph",10,null],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",10,null],[11,"edge_indices","","Return an iterator over the edge indices of the graph",10,null],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",10,null],[11,"raw_nodes","","Access the internal node array.",10,null],[11,"raw_edges","","Access the internal edge array.",10,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",10,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",10,null],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",10,null],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",10,null],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of\nnode or edge indices is fine.",10,null],[11,"reverse","","Reverse the direction of all edges",10,null],[11,"clear","","Remove all nodes and edges",10,null],[11,"clear_edges","","Remove all edges",10,null],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure,\nremove the others.",10,null],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure,\nremove the others.",10,null],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",10,{"inputs":[{"name":"i"}],"output":{"name":"graph"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",10,null],[11,"map","","Create a new `Graph` by mapping node and\nedge weights to new values.",10,null],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges.\nA node or edge may be mapped to `None` to exclude it from\nthe resulting graph.",10,null],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments\nare done, so you may want to go over the result to remove or add edges.",10,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"clone","","",12,null],[11,"detach","","Return a “walker” object that can be used to step through the\nneighbors and edges from the origin node.",12,null],[11,"next","","",13,null],[11,"clone","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"graph"}}],[11,"index","","",6,null],[11,"is_node_index","","",6,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",7,null],[11,"is_node_index","","",7,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",16,null],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",16,null],[11,"next_node","","",16,null],[11,"next_edge","","",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"next","","Fetch the next edge index in the walk for graph `g`.",17,null],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",17,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next_back","","",19,null],[11,"new","petgraph::dot","Create a `Dot` formatting wrapper with default configuration.",20,{"inputs":[{"name":"g"}],"output":{"name":"dot"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",20,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"fmt","","",21,null],[11,"fmt","","",20,null],[11,"fmt","","",20,null],[11,"fmt","","",20,null],[11,"fmt","","",20,null],[11,"neighbors","petgraph::graph","",10,null],[11,"neighbors","petgraph::graphmap","",0,null],[11,"neighbors","petgraph::visit","",22,null],[11,"neighbors","","",23,null],[11,"neighbors_directed","petgraph::graph","",10,null],[11,"neighbors_directed","petgraph::visit","",23,null],[11,"externals","petgraph::graph","",10,null],[11,"externals","petgraph::visit","",23,null],[11,"visit","fixedbitset","",24,null],[11,"is_visited","","",24,null],[11,"visit","","",24,null],[11,"is_visited","","",24,null],[11,"visit","std::collections::hash::set","",25,null],[11,"is_visited","","",25,null],[11,"visit_map","petgraph::graph","",10,null],[11,"reset_map","","",10,null],[11,"reset_map","petgraph::visit","",23,null],[11,"visit_map","petgraph::graphmap","",0,null],[11,"reset_map","","",0,null],[11,"visit_map","petgraph::visit","",22,null],[11,"visit_map","","",23,null],[11,"adjacency_matrix","petgraph::graphmap","",0,null],[11,"is_adjacent","","",0,null],[11,"fmt","petgraph::visit","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new **Dfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",26,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"dfs"}}],[11,"empty","","Create a new **Dfs** using the graph&#39;s visitor map, and no stack.",26,{"inputs":[{"name":"g"}],"output":{"name":"dfs"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe dfs from a particular node.",26,null],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",26,null],[11,"new","","",27,null],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe DFS traversal from a particular node.",27,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"new","","Create a new **Bfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",28,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"bfs"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",28,null],[11,"new","","",29,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"new","","Create a new `Topo`, using the graph&#39;s visitor map, and put all\ninitial nodes in the to-visit list.",30,{"inputs":[{"name":"g"}],"output":{"name":"topo"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",30,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",30,null],[11,"clone","","",31,null],[11,"from_node","","Create a new `SubTopo`, using the graph&#39;s visitor map, and put single\nnode in the to-visit list.",31,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"subtopo"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",31,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",31,null],[11,"clone","petgraph::unionfind","",32,null],[11,"fmt","","",32,null],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",32,{"inputs":[{"name":"usize"}],"output":{"name":"unionfind"}}],[11,"find","","Return the representative for `x`.",32,null],[11,"find_mut","","Return the representative for `x`.",32,null],[11,"union","","Unify the two sets containing `x` and `y`.",32,null],[11,"into_labeling","","Return a vector mapping each element to its representative.",32,null],[11,"adjacency_matrix","petgraph::graph","",10,null],[11,"is_adjacent","","",10,null],[11,"hash","petgraph","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"eq","","",33,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"opposite","","Return the opposite `EdgeDirection`.",33,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"is_directed","","",34,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",35,{"inputs":[],"output":{"name":"bool"}}],[3,"GraphMap","daggy::petgraph::graphmap","`GraphMap&lt;N, E&gt;` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[8,"NodeTrait","","A trait group for `GraphMap`&#39;s node identifier.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",5,null],[0,"graph","daggy::petgraph","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[6,"DefIndex","daggy::petgraph::graph","",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",36,null],[10,"max","","",36,{"inputs":[],"output":{"name":"self"}}],[3,"NodeIndex","","Node identifier.",null,null],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"Node","","The graph&#39;s node type.",null,null],[12,"weight","","Associated node data.",8,null],[3,"Edge","","The graph&#39;s edge type.",null,null],[12,"weight","","Associated edge data.",9,null],[3,"Graph","","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Edges","","Iterator over the edges of a node.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"WalkEdges","","**Deprecated.**",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[0,"dot","daggy::petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","daggy::petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",21,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",21,null],[13,"EdgeNoLabel","","Use no edge labels.",21,null],[0,"visit","daggy::petgraph","Graph visitor algorithms.",null,null],[8,"Graphlike","daggy::petgraph::visit","Base trait for graphs that defines the node identifier.",null,null],[16,"NodeId","","",37,null],[8,"NeighborIter","","NeighborIter gives access to the neighbors iterator.",null,null],[16,"Iter","","",38,null],[10,"neighbors","","Return an iterator that visits all neighbors of the node **n**.",38,null],[3,"AsUndirected","","Wrapper type for walking the graph as if it is undirected",null,null],[12,"0","","",22,null],[3,"Reversed","","Wrapper type for walking the graph as if all edges are reversed.",null,null],[12,"0","","",23,null],[8,"NeighborsDirected","","NeighborsDirected gives access to neighbors of both `Incoming` and `Outgoing`\nedges of a node.",null,null],[16,"NeighborsDirected","","",39,null],[10,"neighbors_directed","","Return an iterator that visits all neighbors of the node **n**.",39,null],[8,"Externals","","Externals returns an iterator of all nodes that either have either no\nincoming or no outgoing edges.",null,null],[16,"Externals","","",40,null],[10,"externals","","Return an iterator of all nodes with no edges in the given direction",40,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",null,null],[10,"visit","","Return **true** if the value is not already present.",41,null],[10,"is_visited","","",41,null],[8,"Visitable","","A graph that can create a visitor map.",null,null],[16,"Map","","",42,null],[10,"visit_map","","",42,null],[8,"Revisitable","","A graph that can reset and resize its visitor map.",null,null],[10,"reset_map","","",43,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph",null,null],[16,"AdjMatrix","","",44,null],[10,"adjacency_matrix","","",44,null],[10,"is_adjacent","","",44,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",26,null],[12,"discovered","","The map of discovered nodes",26,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",28,null],[12,"discovered","","The map of discovered nodes",28,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"SubTopo","","A topological order traversal for a subgraph.",null,null],[0,"unionfind","daggy::petgraph","`UnionFind&lt;K&gt;` is a disjoint-set data structure.",null,null],[3,"UnionFind","daggy::petgraph::unionfind","`UnionFind&lt;K&gt;` is a disjoint-set data structure. It tracks set membership of *n* elements\nindexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.",null,null],[4,"EdgeDirection","daggy::petgraph","Edge direction",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge *from* the current node.",33,null],[13,"Incoming","","An `Incoming` edge is an inbound edge *to* the current node.",33,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[8,"EdgeType","","A graph&#39;s edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",45,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into\na triple of source, target, edge weight.",null,null],[16,"NodeId","","",46,null],[10,"into_weighted_edge","","",46,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"GraphMap","","`GraphMap&lt;N, E&gt;` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",26,null],[12,"discovered","","The map of discovered nodes",26,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"Graph","","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",28,null],[12,"discovered","","The map of discovered nodes",28,null],[3,"EdgeIndex","daggy","Edge identifier.",null,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"Dag","","A Directed acyclic graph (DAG) data structure.",null,null],[3,"Children","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"Parents","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"EdgeIndices","","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.",null,null],[3,"WouldCycle","","An error returned by the `Dag::add_edge` method in the case that adding an edge would have\ncaused the graph to cycle.",null,null],[12,"0","","",47,null],[0,"walker","","**Walker** is a trait providing a variety of useful methods for traversing graph types.",null,null],[3,"Recursive","daggy::walker","Recursively walks a graph using the recursive function `recursive_fn`.",null,null],[3,"Chain","","Walks the entirety of `a` before walking the entirety of `b`.",null,null],[3,"Filter","","A walker that applies some given predicate to each element returned by its walker.\nThe only index pairs that will be yielded are those that make the predicate evaluate to true.",null,null],[3,"Peekable","","A walker that has a `.peek(&amp;graph)` method that returns an optional next neighbor.",null,null],[3,"SkipWhile","","A walker that invokes the predicate on elements until it returns false. Once the predicate\nreturns false, that element and all further elements are yielded.",null,null],[3,"TakeWhile","","A walker that yields elements so long as the predicate returns true. After the\npredicate returns false for the first time, no further elements will be yielded.",null,null],[3,"Skip","","A walker that skips the first n steps of this walk, and then yields all further steps.",null,null],[3,"Take","","A walker that yields the first n steps of this walk.",null,null],[3,"Cycle","","A walker that repeats its internal walker endlessly.",null,null],[3,"Inspect","","A walker that calls a function with a reference to each index pair before yielding them.\nThis is often useful for debugging a walker pipeline.",null,null],[3,"Iter","","An iterator yielding index pairs produced by its internal walker and graph.",null,null],[3,"IterEdges","","An iterator yielding edge indices produced by its internal walker and graph.",null,null],[3,"IterNodes","","An iterator yielding node indices produced by its internal walker and graph.",null,null],[3,"IterWeights","","An iterator yielding weights associated with the index pairs produced by its internal walker\nand graph.",null,null],[3,"IterEdgeWeights","","An iterator yielding edge weights associated with the indices produced by its internal walker\nand graph.",null,null],[3,"IterNodeWeights","","An iterator yielding node weights associated with the indices produced by its internal walker\nand graph.",null,null],[6,"IndexPair","","Short-hand for an edge node index pair.",null,null],[8,"Walker","","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",48,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given\n**Graph**.",48,null],[11,"next_edge","","The next edge in our walk for the given **Graph**.",48,null],[11,"next_node","","The next node in our walk for the given **Graph**.",48,null],[11,"count","","Counts all the steps in the entire walk of the given graph.",48,null],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",48,null],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",48,null],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",48,null],[11,"nth","","Walks &quot;n&quot; number of steps and produces the resulting edge node pair.",48,null],[11,"nth_edge","","Walks &quot;n&quot; number of steps and produces the resulting edge.",48,null],[11,"nth_node","","Walks &quot;n&quot; number of steps and produces the resulting node.",48,null],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",48,null],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker.\nThe only elements that will be yielded are those that make the predicate evaluate to true.",48,null],[11,"peekable","","Creates a walker that has a `.peek(&amp;graph)` method that returns an optional next neighbor.",48,null],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the\npredicate returns false, that element and all further elements are yielded.",48,null],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the\npredicate returns false for the first time, no further elements will be yielded.",48,null],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further\nsteps.",48,null],[11,"take","","Creates a walker that yields the first n steps of this walk.",48,null],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",48,null],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",48,null],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",48,null],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",48,null],[11,"find_node","","Returns the node index satisfying the specified predicate.",48,null],[11,"cycle","","Repeats the walker endlessly.",48,null],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end\nof the walk.",48,null],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding\nthem. This is often useful for debugging a walker pipeline.",48,null],[11,"iter","","Converts the walker into an iterator yielding index pairs.",48,null],[11,"iter_weights","","Converts the walker into an iterator yielding `(&amp;e, &amp;n)`, where `e` is the edge weight for\nthe next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"new","","Construct a new **Recursive** **Walker** starting from the node at the given index.",49,{"inputs":[{"name":"nodeindex"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",49,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"next","","",50,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",52,null],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",52,null],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",52,null],[11,"next","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"next","","",55,null],[11,"fmt","","",56,null],[11,"clone","","",56,null],[11,"next","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"edges","","Convert to an iterator that only yields the edge indices.",59,null],[11,"nodes","","Convert to an iterator that only yields the node indices.",59,null],[11,"next","","",59,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"next","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"edges","","Convert to an iterator yielding only the edge weights.",62,null],[11,"nodes","","Convert to an iterator yielding only the node weights.",62,null],[11,"next","","",62,null],[11,"fmt","","",63,null],[11,"clone","","",63,null],[11,"next","","",63,null],[11,"fmt","","",64,null],[11,"clone","","",64,null],[11,"next","","",64,null],[6,"PetGraph","daggy","The Petgraph to be used internally within the Dag for storing/managing nodes and edges.",null,null],[6,"RawNodes","","Read only access into a **Dag**&#39;s internal node array.",null,null],[6,"RawEdges","","Read only access into a **Dag**&#39;s internal edge array.",null,null],[6,"RecursiveWalk","","An alias to simplify the **Recursive** **Walker** type returned by **Dag**.",null,null],[11,"fmt","","",65,null],[11,"clone","","",65,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"new","","Create a new, empty `Dag`.",65,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",65,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all nodes and edges from the **Dag**.",65,null],[11,"node_count","","The total number of nodes in the **Dag**.",65,null],[11,"edge_count","","The total number of edgees in the **Dag**.",65,null],[11,"graph","","Borrow the `Dag`&#39;s underlying `PetGraph&lt;N, Ix&gt;`.\nAll existing indices may be used to index into this `PetGraph` the same way they may be\nused to index into the `Dag`.",65,null],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`.\nAll existing indices may be used to index into this `PetGraph` the same way they may be\nused to index into the `Dag`.",65,null],[11,"add_node","","Add a new node to the `Dag` with the given weight.",65,null],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",65,null],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",65,null],[11,"update_edge","","Update the edge from nodes `a` -&gt; `b` with the given weight.",65,null],[11,"find_edge","","Find and return the index to the edge that describes `a` -&gt; `b` if there is one.",65,null],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",65,null],[11,"clear_edges","","Remove all edges.",65,null],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`.\nReturns both the edge&#39;s `EdgeIndex` and the node&#39;s `NodeIndex`.",65,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`.\nReturns both the edge&#39;s `EdgeIndex` and the node&#39;s `NodeIndex`.",65,null],[11,"node_weight","","Borrow the weight from the node at the given index.",65,null],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",65,null],[11,"raw_nodes","","Read from the internal node array.",65,null],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",65,null],[11,"edge_weight","","Borrow the weight from the edge at the given index.",65,null],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",65,null],[11,"raw_edges","","Read from the internal edge array.",65,null],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",65,null],[11,"index_twice_mut","","Index the `Dag` by two indices.",65,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",65,null],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn&#39;t exist.",65,null],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",65,null],[11,"children","","A &quot;walker&quot; object that may be used to step through the children of the given parent node.",65,null],[11,"recursive_walk","","A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.",65,null],[11,"index","","",65,null],[11,"index_mut","","",65,null],[11,"index","","",65,null],[11,"index_mut","","",65,null],[11,"next","","",66,null],[11,"next","","",67,null],[11,"next","","",68,null],[11,"fmt","","",47,null],[11,"description","","",47,null]],"paths":[[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Ptr"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Node"],[3,"Edge"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"Dot"],[4,"Config"],[3,"AsUndirected"],[3,"Reversed"],[3,"FixedBitSet"],[3,"HashSet"],[3,"Dfs"],[3,"DfsIter"],[3,"Bfs"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[4,"EdgeDirection"],[4,"Directed"],[4,"Undirected"],[8,"IndexType"],[8,"Graphlike"],[8,"NeighborIter"],[8,"NeighborsDirected"],[8,"Externals"],[8,"VisitMap"],[8,"Visitable"],[8,"Revisitable"],[8,"GetAdjacencyMatrix"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[3,"WouldCycle"],[8,"Walker"],[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"]]};
searchIndex["petgraph"] = {"doc":"**petgraph** is a graph data structure library.","items":[[4,"EdgeDirection","petgraph","Edge direction",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge *from* the current node.",0,null],[13,"Incoming","","An `Incoming` edge is an inbound edge *to* the current node.",0,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[0,"algo","","Graph algorithms.",null,null],[5,"is_isomorphic","petgraph::algo","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_isomorphic_matching","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"dijkstra","","Dijkstra&#39;s shortest path algorithm.",null,{"inputs":[{"name":"g"},{"name":"nodeid"},{"name":"option"},{"name":"f"}],"output":{"name":"hashmap"}}],[5,"is_cyclic_undirected","","Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic","","**Deprecated: Renamed to `is_cyclic_undirected`.**",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic_directed","","Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"toposort","","Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"scc","","Compute the *strongly connected components* using Kosaraju&#39;s algorithm.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"condensation","","Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"name":"graph"}}],[5,"connected_components","","Return the number of connected components of the graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[5,"min_spanning_tree","","Compute a *minimum spanning tree* of a graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[0,"graphmap","petgraph","`GraphMap&lt;N, E&gt;` is an undirected graph where node values are mapping keys.",null,null],[3,"GraphMap","petgraph::graphmap","`GraphMap&lt;N, E&gt;` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",1,null],[8,"NodeTrait","","A trait group for `GraphMap`&#39;s node identifier.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new","","Create a new `GraphMap`.",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",2,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",2,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes in the graph.",2,null],[11,"edge_count","","Return the number of edges in the graph.",2,null],[11,"clear","","Remove all nodes and edges",2,null],[11,"add_node","","Add node `n` to the graph.",2,null],[11,"remove_node","","Return `true` if node `n` was removed.",2,null],[11,"contains_node","","Return `true` if the node is contained in the graph.",2,null],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated\ndata `weight`.",2,null],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",2,null],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",2,null],[11,"nodes","","Return an iterator over the nodes of the graph.",2,null],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",2,null],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges,\npaired with the edge weight.",2,null],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",2,null],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",2,null],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",2,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"clone","","",4,null],[11,"next","","",5,null],[11,"next","","",6,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,null],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",1,null],[11,"deref","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[0,"graph","petgraph","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"NodeIndex","petgraph::graph","Node identifier.",null,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"Node","","The graph&#39;s node type.",null,null],[12,"weight","","Associated node data.",7,null],[3,"Edge","","The graph&#39;s edge type.",null,null],[12,"weight","","Associated edge data.",8,null],[3,"Graph","","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Edges","","Iterator over the edges of a node.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"WalkEdges","","**Deprecated.**",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[6,"DefIndex","","The default integer type for node and edge indices in `Graph`.\n`u32` is the default to reduce the size of the graph&#39;s data and improve\nperformance in the common case.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",9,null],[10,"max","","",9,{"inputs":[],"output":{"name":"self"}}],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[11,"hash","","",10,null],[11,"cmp","","",10,null],[11,"partial_cmp","","",10,null],[11,"lt","","",10,null],[11,"le","","",10,null],[11,"gt","","",10,null],[11,"ge","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",10,null],[11,"end","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"hash","","",11,null],[11,"cmp","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"new","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",11,null],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example\nto end an adjacency list.",11,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",11,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",8,null],[11,"source","","Return the source node index.",8,null],[11,"target","","Return the target node index.",8,null],[11,"clone","","",12,null],[11,"clone_from","","",12,null],[11,"fmt","","",12,null],[11,"new","","Create a new `Graph` with directed edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",12,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",12,null],[11,"node_count","","Return the number of nodes (vertices) in the graph.",12,null],[11,"edge_count","","Return the number of edges in the graph.",12,null],[11,"is_directed","","Whether the graph has directed edges or not.",12,null],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",12,null],[11,"node_weight","","Access the weight for node `a`.",12,null],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",12,null],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated\ndata `weight`.",12,null],[11,"update_edge","","Add or update an edge from `a` to `b`.\nIf the edge already exists, its weight is updated.",12,null],[11,"edge_weight","","Access the weight for edge `e`.",12,null],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",12,null],[11,"edge_endpoints","","Access the source and target nodes for `e`.",12,null],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight.\nIf it doesn&#39;t exist in the graph, return `None`.",12,null],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn&#39;t exist.",12,null],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",12,null],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",12,null],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`,\nin either direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",12,null],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge\nweights.",12,null],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction, paired with the respective edge weights.",12,null],[11,"find_edge","","Lookup an edge from `a` to `b`.",12,null],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",12,null],[11,"externals","","Return an iterator over either the nodes without edges to them\n(`Incoming`) or from them (`Outgoing`).",12,null],[11,"node_indices","","Return an iterator over the node indices of the graph",12,null],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",12,null],[11,"edge_indices","","Return an iterator over the edge indices of the graph",12,null],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",12,null],[11,"raw_nodes","","Access the internal node array.",12,null],[11,"raw_edges","","Access the internal edge array.",12,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",12,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",12,null],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",12,null],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",12,null],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of\nnode or edge indices is fine.",12,null],[11,"reverse","","Reverse the direction of all edges",12,null],[11,"clear","","Remove all nodes and edges",12,null],[11,"clear_edges","","Remove all edges",12,null],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure,\nremove the others.",12,null],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure,\nremove the others.",12,null],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",12,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",12,null],[11,"map","","Create a new `Graph` by mapping node and\nedge weights to new values.",12,null],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges.\nA node or edge may be mapped to `None` to exclude it from\nthe resulting graph.",12,null],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments\nare done, so you may want to go over the result to remove or add edges.",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"clone","","",14,null],[11,"detach","","Return a “walker” object that can be used to step through the\nneighbors and edges from the origin node.",14,null],[11,"next","","",15,null],[11,"clone","","",15,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",10,null],[11,"is_node_index","","",10,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"is_node_index","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",18,null],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",18,null],[11,"next_node","","",18,null],[11,"next_edge","","",18,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"next","","Fetch the next edge index in the walk for graph `g`.",19,null],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"next_back","","",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"next_back","","",21,null],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",22,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",22,null],[13,"EdgeNoLabel","","Use no edge labels.",22,null],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",23,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",23,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"fmt","","",22,null],[11,"fmt","","",23,null],[11,"fmt","","",23,null],[11,"fmt","","",23,null],[11,"fmt","","",23,null],[0,"visit","petgraph","Graph visitor algorithms.",null,null],[3,"AsUndirected","petgraph::visit","Wrapper type for walking the graph as if it is undirected",null,null],[12,"0","","",24,null],[3,"Reversed","","Wrapper type for walking the graph as if all edges are reversed.",null,null],[12,"0","","",25,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",26,null],[12,"discovered","","The map of discovered nodes",26,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",27,null],[12,"discovered","","The map of discovered nodes",27,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"SubTopo","","A topological order traversal for a subgraph.",null,null],[8,"Graphlike","","Base trait for graphs that defines the node identifier.",null,null],[16,"NodeId","","",28,null],[8,"NeighborIter","","NeighborIter gives access to the neighbors iterator.",null,null],[16,"Iter","","",29,null],[10,"neighbors","","Return an iterator that visits all neighbors of the node **n**.",29,null],[8,"NeighborsDirected","","NeighborsDirected gives access to neighbors of both `Incoming` and `Outgoing`\nedges of a node.",null,null],[16,"NeighborsDirected","","",30,null],[10,"neighbors_directed","","Return an iterator that visits all neighbors of the node **n**.",30,null],[8,"Externals","","Externals returns an iterator of all nodes that either have either no\nincoming or no outgoing edges.",null,null],[16,"Externals","","",31,null],[10,"externals","","Return an iterator of all nodes with no edges in the given direction",31,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",null,null],[10,"visit","","Return **true** if the value is not already present.",32,null],[10,"is_visited","","",32,null],[8,"Visitable","","A graph that can create a visitor map.",null,null],[16,"Map","","",33,null],[10,"visit_map","","",33,null],[8,"Revisitable","","A graph that can reset and resize its visitor map.",null,null],[10,"reset_map","","",34,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph",null,null],[16,"AdjMatrix","","",35,null],[10,"adjacency_matrix","","",35,null],[10,"is_adjacent","","",35,null],[11,"neighbors","petgraph::graph","",12,null],[11,"neighbors","petgraph::graphmap","",2,null],[11,"neighbors","petgraph::visit","",24,null],[11,"neighbors","","",25,null],[11,"neighbors_directed","petgraph::graph","",12,null],[11,"neighbors_directed","petgraph::visit","",25,null],[11,"externals","petgraph::graph","",12,null],[11,"externals","petgraph::visit","",25,null],[11,"visit","fixedbitset","",36,null],[11,"is_visited","","",36,null],[11,"visit","","",36,null],[11,"is_visited","","",36,null],[11,"visit","std::collections::hash::set","",37,null],[11,"is_visited","","",37,null],[11,"visit_map","petgraph::graph","",12,null],[11,"reset_map","","",12,null],[11,"reset_map","petgraph::visit","",25,null],[11,"visit_map","petgraph::graphmap","",2,null],[11,"reset_map","","",2,null],[11,"visit_map","petgraph::visit","",24,null],[11,"visit_map","","",25,null],[11,"adjacency_matrix","petgraph::graphmap","",2,null],[11,"is_adjacent","","",2,null],[11,"fmt","petgraph::visit","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new **Dfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",26,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"empty","","Create a new **Dfs** using the graph&#39;s visitor map, and no stack.",26,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe dfs from a particular node.",26,null],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",26,null],[11,"new","","",38,{"inputs":[{"name":"g"},{"name":"nodeid"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe DFS traversal from a particular node.",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"clone","","",38,null],[11,"clone","","",27,null],[11,"new","","Create a new **Bfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",27,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",27,null],[11,"new","","",39,{"inputs":[{"name":"g"},{"name":"nodeid"}],"output":{"name":"self"}}],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"new","","Create a new `Topo`, using the graph&#39;s visitor map, and put all\ninitial nodes in the to-visit list.",40,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",40,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",40,null],[11,"clone","","",41,null],[11,"from_node","","Create a new `SubTopo`, using the graph&#39;s visitor map, and put single\nnode in the to-visit list.",41,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",41,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",41,null],[0,"unionfind","petgraph","`UnionFind&lt;K&gt;` is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","`UnionFind&lt;K&gt;` is a disjoint-set data structure. It tracks set membership of *n* elements\nindexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"find","","Return the representative for `x`.",42,null],[11,"find_mut","","Return the representative for `x`.",42,null],[11,"union","","Unify the two sets containing `x` and `y`.",42,null],[11,"into_labeling","","Return a vector mapping each element to its representative.",42,null],[11,"adjacency_matrix","petgraph::graph","",12,null],[11,"is_adjacent","","",12,null],[8,"EdgeType","petgraph","A graph&#39;s edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",43,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into\na triple of source, target, edge weight.",null,null],[16,"NodeId","","",44,null],[10,"into_weighted_edge","","",44,null],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"opposite","","Return the opposite `EdgeDirection`.",0,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"is_directed","","",45,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",46,{"inputs":[],"output":{"name":"bool"}}]],"paths":[[4,"EdgeDirection"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Node"],[3,"Edge"],[8,"IndexType"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[4,"Config"],[3,"Dot"],[3,"AsUndirected"],[3,"Reversed"],[3,"Dfs"],[3,"Bfs"],[8,"Graphlike"],[8,"NeighborIter"],[8,"NeighborsDirected"],[8,"Externals"],[8,"VisitMap"],[8,"Visitable"],[8,"Revisitable"],[8,"GetAdjacencyMatrix"],[3,"FixedBitSet"],[3,"HashSet"],[3,"DfsIter"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"]]};
searchIndex["fixedbitset"] = {"doc":"**FixedBitSet** is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","**FixedBitSet** is a simple fixed size set of bits that can\nbe enabled (1 / **true**) or disabled (0 / **false**).",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"with_capacity","","Create a new **FixedBitSet** with a specific number of bits,\nall initially clear.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"grow","","Grow capacity to **bits**, all new bits initialized to zero",0,null],[11,"len","","Return the length of the **FixedBitSet** in bits.",0,null],[11,"contains","","Return **true** if the bit is enabled in the **FixedBitSet**,\n**false** otherwise.",0,null],[11,"clear","","Clear all bits.",0,null],[11,"insert","","**Panics** if **bit** is out of bounds.",0,null],[11,"set","","**Panics** if **bit** is out of bounds.",0,null],[11,"as_slice","","View the bitset as a slice of `u32` blocks",0,null],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last\nwill cause `contains` to return potentially incorrect results for bits past the bitlength.",0,null],[11,"clone","","",0,null],[11,"index","","",0,null]],"paths":[[3,"FixedBitSet"]]};
initSearch(searchIndex);
